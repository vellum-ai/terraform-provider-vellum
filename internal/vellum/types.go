// This file was auto-generated by Fern from our API Definition.

package vellum

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/terraform-provider-vellum/internal/vellum/core"
	time "time"
)

type ExecutePromptRequest struct {
	// The list of inputs defined in the Prompt's deployment with their corresponding values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"inputs,omitempty"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"prompt_deployment_id,omitempty"`
	// The name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"prompt_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"release_tag,omitempty"`
	// "Optionally include a unique identifier for tracking purposes. Must be unique for a given prompt deployment.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	ExpandMeta   *PromptDeploymentExpandMetaRequestRequest `json:"expand_meta,omitempty" url:"expand_meta,omitempty"`
	RawOverrides *RawPromptExecutionOverridesRequest       `json:"raw_overrides,omitempty" url:"raw_overrides,omitempty"`
	// Returns the raw API response data sent from the model host. Combined with `raw_overrides`, it can be used to access new features from models.
	ExpandRaw []string               `json:"expand_raw,omitempty" url:"expand_raw,omitempty"`
	Metadata  map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
}

type ExecutePromptStreamRequest struct {
	// The list of inputs defined in the Prompt's deployment with their corresponding values.
	Inputs []*PromptDeploymentInputRequest `json:"inputs,omitempty" url:"inputs,omitempty"`
	// The ID of the Prompt Deployment. Must provide either this or prompt_deployment_name.
	PromptDeploymentId *string `json:"prompt_deployment_id,omitempty" url:"prompt_deployment_id,omitempty"`
	// The name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	PromptDeploymentName *string `json:"prompt_deployment_name,omitempty" url:"prompt_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Prompt Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"release_tag,omitempty"`
	// "Optionally include a unique identifier for tracking purposes. Must be unique for a given prompt deployment.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The name of the Prompt Deployment. Must provide either this or prompt_deployment_id.
	ExpandMeta   *PromptDeploymentExpandMetaRequestRequest `json:"expand_meta,omitempty" url:"expand_meta,omitempty"`
	RawOverrides *RawPromptExecutionOverridesRequest       `json:"raw_overrides,omitempty" url:"raw_overrides,omitempty"`
	// Returns the raw API response data sent from the model host. Combined with `raw_overrides`, it can be used to access new features from models.
	ExpandRaw []string               `json:"expand_raw,omitempty" url:"expand_raw,omitempty"`
	Metadata  map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
}

type ExecuteWorkflowRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"inputs,omitempty"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"workflow_deployment_id,omitempty"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"workflow_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"release_tag,omitempty"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
}

type ExecuteWorkflowStreamRequest struct {
	// The list of inputs defined in the Workflow's Deployment with their corresponding values.
	Inputs []*WorkflowRequestInputRequest `json:"inputs,omitempty" url:"inputs,omitempty"`
	// The ID of the Workflow Deployment. Must provide either this or workflow_deployment_name.
	WorkflowDeploymentId *string `json:"workflow_deployment_id,omitempty" url:"workflow_deployment_id,omitempty"`
	// The name of the Workflow Deployment. Must provide either this or workflow_deployment_id.
	WorkflowDeploymentName *string `json:"workflow_deployment_name,omitempty" url:"workflow_deployment_name,omitempty"`
	// Optionally specify a release tag if you want to pin to a specific release of the Workflow Deployment
	ReleaseTag *string `json:"release_tag,omitempty" url:"release_tag,omitempty"`
	// Optionally include a unique identifier for tracking purposes. Must be unique for a given workflow deployment.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// Optionally specify which events you want to receive. Defaults to only WORKFLOW events. Note that the schema of non-WORKFLOW events is unstable and should be used with caution.
	EventTypes []WorkflowExecutionEventType `json:"event_types,omitempty" url:"event_types,omitempty"`
}

type GenerateBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"deployment_name,omitempty"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"requests,omitempty"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"options,omitempty"`
}

type GenerateStreamBodyRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"deployment_name,omitempty"`
	// The generation request to make. Bulk requests are no longer supported, this field must be an array of length 1.
	Requests []*GenerateRequest `json:"requests,omitempty" url:"requests,omitempty"`
	// Additional configuration that can be used to control what's included in the response.
	Options *GenerateOptionsRequest `json:"options,omitempty" url:"options,omitempty"`
}

type SearchRequestBodyRequest struct {
	// The ID of the index to search against. Must provide either this or index_name.
	IndexId *string `json:"index_id,omitempty" url:"index_id,omitempty"`
	// The name of the index to search against. Must provide either this or index_id.
	IndexName *string `json:"index_name,omitempty" url:"index_name,omitempty"`
	// The query to search for.
	Query string `json:"query" url:"query"`
	// Configuration options for the search.
	Options *SearchRequestOptionsRequest `json:"options,omitempty" url:"options,omitempty"`
}

type SubmitCompletionActualsRequest struct {
	// The ID of the deployment. Must provide either this or deployment_name.
	DeploymentId *string `json:"deployment_id,omitempty" url:"deployment_id,omitempty"`
	// The name of the deployment. Must provide either this or deployment_id.
	DeploymentName *string `json:"deployment_name,omitempty" url:"deployment_name,omitempty"`
	// Feedback regarding the quality of previously generated completions
	Actuals []*SubmitCompletionActualRequest `json:"actuals,omitempty" url:"actuals,omitempty"`
}

type SubmitWorkflowExecutionActualsRequest struct {
	// Feedback regarding the quality of an output on a previously executed workflow.
	Actuals []*SubmitWorkflowExecutionActualRequest `json:"actuals,omitempty" url:"actuals,omitempty"`
	// The Vellum-generated ID of a previously executed workflow. Must provide either this or external_id.
	ExecutionId *string `json:"execution_id,omitempty" url:"execution_id,omitempty"`
	// The external ID that was originally provided by when executing the workflow, if applicable, that you'd now like to submit actuals for. Must provide either this or execution_id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
}

// A Node Result Event emitted from an API Node.
type ApiNodeResult struct {
	Data *ApiNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApiNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResult(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResult) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiNodeResultData struct {
	TextOutputId       string                 `json:"text_output_id" url:"text_output_id"`
	Text               *string                `json:"text,omitempty" url:"text,omitempty"`
	JsonOutputId       string                 `json:"json_output_id" url:"json_output_id"`
	Json               map[string]interface{} `json:"json,omitempty" url:"json,omitempty"`
	StatusCodeOutputId string                 `json:"status_code_output_id" url:"status_code_output_id"`
	StatusCode         int                    `json:"status_code" url:"status_code"`

	_rawJSON json.RawMessage
}

func (a *ApiNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiNodeResultData(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiNodeResultData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A list of chat message content items.
type ArrayChatMessageContent struct {
	Value []*ArrayChatMessageContentItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ArrayChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ArrayChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ArrayChatMessageContent(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContent) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayChatMessageContentItem struct {
	Type         string
	String       *StringChatMessageContent
	FunctionCall *FunctionCallChatMessageContent
	Image        *ImageChatMessageContent
}

func (a *ArrayChatMessageContentItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayChatMessageContentItem) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringChatMessageContent
		}{
			Type:                     "STRING",
			StringChatMessageContent: a.String,
		}
		return json.Marshal(marshaler)
	}
	if a.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallChatMessageContent
		}{
			Type:                           "FUNCTION_CALL",
			FunctionCallChatMessageContent: a.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if a.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ImageChatMessageContent
		}{
			Type:                    "IMAGE",
			ImageChatMessageContent: a.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemVisitor interface {
	VisitString(*StringChatMessageContent) error
	VisitFunctionCall(*FunctionCallChatMessageContent) error
	VisitImage(*ImageChatMessageContent) error
}

func (a *ArrayChatMessageContentItem) Accept(visitor ArrayChatMessageContentItemVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemRequest struct {
	Type         string
	String       *StringChatMessageContentRequest
	FunctionCall *FunctionCallChatMessageContentRequest
	Image        *ImageChatMessageContentRequest
}

func (a *ArrayChatMessageContentItemRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayChatMessageContentItemRequest) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringChatMessageContentRequest
		}{
			Type:                            "STRING",
			StringChatMessageContentRequest: a.String,
		}
		return json.Marshal(marshaler)
	}
	if a.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallChatMessageContentRequest
		}{
			Type:                                  "FUNCTION_CALL",
			FunctionCallChatMessageContentRequest: a.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if a.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ImageChatMessageContentRequest
		}{
			Type:                           "IMAGE",
			ImageChatMessageContentRequest: a.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayChatMessageContentItemRequestVisitor interface {
	VisitString(*StringChatMessageContentRequest) error
	VisitFunctionCall(*FunctionCallChatMessageContentRequest) error
	VisitImage(*ImageChatMessageContentRequest) error
}

func (a *ArrayChatMessageContentItemRequest) Accept(visitor ArrayChatMessageContentItemRequestVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

// A list of chat message content items.
type ArrayChatMessageContentRequest struct {
	Value []*ArrayChatMessageContentItemRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ArrayChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ArrayChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ArrayChatMessageContentRequest(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ArrayChatMessageContentRequest) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ArrayEnum = string

type ArrayVariableValueItem struct {
	Type          string
	String        *StringVariableValue
	Number        *NumberVariableValue
	Json          *JsonVariableValue
	ChatHistory   *ChatHistoryVariableValue
	SearchResults *SearchResultsVariableValue
	Error         *ErrorVariableValue
	FunctionCall  *FunctionCallVariableValue
	Image         *ImageVariableValue
}

func (a *ArrayVariableValueItem) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	a.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.String = value
	case "NUMBER":
		value := new(NumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Number = value
	case "JSON":
		value := new(JsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Json = value
	case "CHAT_HISTORY":
		value := new(ChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(SearchResultsVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.SearchResults = value
	case "ERROR":
		value := new(ErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Error = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.FunctionCall = value
	case "IMAGE":
		value := new(ImageVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		a.Image = value
	}
	return nil
}

func (a ArrayVariableValueItem) MarshalJSON() ([]byte, error) {
	if a.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringVariableValue
		}{
			Type:                "STRING",
			StringVariableValue: a.String,
		}
		return json.Marshal(marshaler)
	}
	if a.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NumberVariableValue
		}{
			Type:                "NUMBER",
			NumberVariableValue: a.Number,
		}
		return json.Marshal(marshaler)
	}
	if a.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*JsonVariableValue
		}{
			Type:              "JSON",
			JsonVariableValue: a.Json,
		}
		return json.Marshal(marshaler)
	}
	if a.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ChatHistoryVariableValue
		}{
			Type:                     "CHAT_HISTORY",
			ChatHistoryVariableValue: a.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if a.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*SearchResultsVariableValue
		}{
			Type:                       "SEARCH_RESULTS",
			SearchResultsVariableValue: a.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if a.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ErrorVariableValue
		}{
			Type:               "ERROR",
			ErrorVariableValue: a.Error,
		}
		return json.Marshal(marshaler)
	}
	if a.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallVariableValue
		}{
			Type:                      "FUNCTION_CALL",
			FunctionCallVariableValue: a.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if a.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ImageVariableValue
		}{
			Type:               "IMAGE",
			ImageVariableValue: a.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", a)
}

type ArrayVariableValueItemVisitor interface {
	VisitString(*StringVariableValue) error
	VisitNumber(*NumberVariableValue) error
	VisitJson(*JsonVariableValue) error
	VisitChatHistory(*ChatHistoryVariableValue) error
	VisitSearchResults(*SearchResultsVariableValue) error
	VisitError(*ErrorVariableValue) error
	VisitFunctionCall(*FunctionCallVariableValue) error
	VisitImage(*ImageVariableValue) error
}

func (a *ArrayVariableValueItem) Accept(visitor ArrayVariableValueItemVisitor) error {
	if a.String != nil {
		return visitor.VisitString(a.String)
	}
	if a.Number != nil {
		return visitor.VisitNumber(a.Number)
	}
	if a.Json != nil {
		return visitor.VisitJson(a.Json)
	}
	if a.ChatHistory != nil {
		return visitor.VisitChatHistory(a.ChatHistory)
	}
	if a.SearchResults != nil {
		return visitor.VisitSearchResults(a.SearchResults)
	}
	if a.Error != nil {
		return visitor.VisitError(a.Error)
	}
	if a.FunctionCall != nil {
		return visitor.VisitFunctionCall(a.FunctionCall)
	}
	if a.Image != nil {
		return visitor.VisitImage(a.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", a)
}

// - `CHAT_MESSAGE` - CHAT_MESSAGE
// - `CHAT_HISTORY` - CHAT_HISTORY
// - `JINJA` - JINJA
// - `FUNCTION_DEFINITION` - FUNCTION_DEFINITION
type BlockTypeEnum string

const (
	BlockTypeEnumChatMessage        BlockTypeEnum = "CHAT_MESSAGE"
	BlockTypeEnumChatHistory        BlockTypeEnum = "CHAT_HISTORY"
	BlockTypeEnumJinja              BlockTypeEnum = "JINJA"
	BlockTypeEnumFunctionDefinition BlockTypeEnum = "FUNCTION_DEFINITION"
)

func NewBlockTypeEnumFromString(s string) (BlockTypeEnum, error) {
	switch s {
	case "CHAT_MESSAGE":
		return BlockTypeEnumChatMessage, nil
	case "CHAT_HISTORY":
		return BlockTypeEnumChatHistory, nil
	case "JINJA":
		return BlockTypeEnumJinja, nil
	case "FUNCTION_DEFINITION":
		return BlockTypeEnumFunctionDefinition, nil
	}
	var t BlockTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BlockTypeEnum) Ptr() *BlockTypeEnum {
	return &b
}

type ChatHistoryEnum = string

// A user input representing a list of chat messages
type ChatHistoryInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatHistoryInputRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryInputRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatHistoryVariableValue struct {
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatHistoryVariableValue(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatHistoryVariableValue) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessage struct {
	Text    *string             `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole     `json:"role,omitempty" url:"role,omitempty"`
	Content *ChatMessageContent `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessage) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessage(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessage) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ChatMessageContent struct {
	Type         string
	String       *StringChatMessageContent
	FunctionCall *FunctionCallChatMessageContent
	Array        *ArrayChatMessageContent
	Image        *ImageChatMessageContent
}

func (c *ChatMessageContent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	case "ARRAY":
		value := new(ArrayChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "IMAGE":
		value := new(ImageChatMessageContent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Image = value
	}
	return nil
}

func (c ChatMessageContent) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringChatMessageContent
		}{
			Type:                     "STRING",
			StringChatMessageContent: c.String,
		}
		return json.Marshal(marshaler)
	}
	if c.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallChatMessageContent
		}{
			Type:                           "FUNCTION_CALL",
			FunctionCallChatMessageContent: c.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if c.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ArrayChatMessageContent
		}{
			Type:                    "ARRAY",
			ArrayChatMessageContent: c.Array,
		}
		return json.Marshal(marshaler)
	}
	if c.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ImageChatMessageContent
		}{
			Type:                    "IMAGE",
			ImageChatMessageContent: c.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentVisitor interface {
	VisitString(*StringChatMessageContent) error
	VisitFunctionCall(*FunctionCallChatMessageContent) error
	VisitArray(*ArrayChatMessageContent) error
	VisitImage(*ImageChatMessageContent) error
}

func (c *ChatMessageContent) Accept(visitor ChatMessageContentVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.Image != nil {
		return visitor.VisitImage(c.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentRequest struct {
	Type         string
	String       *StringChatMessageContentRequest
	FunctionCall *FunctionCallChatMessageContentRequest
	Array        *ArrayChatMessageContentRequest
	Image        *ImageChatMessageContentRequest
}

func (c *ChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "FUNCTION_CALL":
		value := new(FunctionCallChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	case "ARRAY":
		value := new(ArrayChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "IMAGE":
		value := new(ImageChatMessageContentRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Image = value
	}
	return nil
}

func (c ChatMessageContentRequest) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringChatMessageContentRequest
		}{
			Type:                            "STRING",
			StringChatMessageContentRequest: c.String,
		}
		return json.Marshal(marshaler)
	}
	if c.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallChatMessageContentRequest
		}{
			Type:                                  "FUNCTION_CALL",
			FunctionCallChatMessageContentRequest: c.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if c.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ArrayChatMessageContentRequest
		}{
			Type:                           "ARRAY",
			ArrayChatMessageContentRequest: c.Array,
		}
		return json.Marshal(marshaler)
	}
	if c.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ImageChatMessageContentRequest
		}{
			Type:                           "IMAGE",
			ImageChatMessageContentRequest: c.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageContentRequestVisitor interface {
	VisitString(*StringChatMessageContentRequest) error
	VisitFunctionCall(*FunctionCallChatMessageContentRequest) error
	VisitArray(*ArrayChatMessageContentRequest) error
	VisitImage(*ImageChatMessageContentRequest) error
}

func (c *ChatMessageContentRequest) Accept(visitor ChatMessageContentRequestVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.Image != nil {
		return visitor.VisitImage(c.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type ChatMessageRequest struct {
	Text    *string                    `json:"text,omitempty" url:"text,omitempty"`
	Role    ChatMessageRole            `json:"role,omitempty" url:"role,omitempty"`
	Content *ChatMessageContentRequest `json:"content,omitempty" url:"content,omitempty"`
	// An optional identifier representing who or what generated this message.
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ChatMessageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ChatMessageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChatMessageRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChatMessageRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// - `SYSTEM` - System
// - `ASSISTANT` - Assistant
// - `USER` - User
// - `FUNCTION` - Function
type ChatMessageRole string

const (
	ChatMessageRoleSystem    ChatMessageRole = "SYSTEM"
	ChatMessageRoleAssistant ChatMessageRole = "ASSISTANT"
	ChatMessageRoleUser      ChatMessageRole = "USER"
	ChatMessageRoleFunction  ChatMessageRole = "FUNCTION"
)

func NewChatMessageRoleFromString(s string) (ChatMessageRole, error) {
	switch s {
	case "SYSTEM":
		return ChatMessageRoleSystem, nil
	case "ASSISTANT":
		return ChatMessageRoleAssistant, nil
	case "USER":
		return ChatMessageRoleUser, nil
	case "FUNCTION":
		return ChatMessageRoleFunction, nil
	}
	var t ChatMessageRole
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ChatMessageRole) Ptr() *ChatMessageRole {
	return &c
}

type CodeExecutionNodeArrayResult struct {
	Id    string                    `json:"id" url:"id"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeArrayResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeArrayResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeChatHistoryResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeChatHistoryResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeErrorResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeErrorResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeFunctionCallResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeFunctionCallResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeJsonResult struct {
	Id    string                 `json:"id" url:"id"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeJsonResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeJsonResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeNumberResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeNumberResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Code Execution Node.
type CodeExecutionNodeResult struct {
	Data *CodeExecutionNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultData struct {
	Output      *CodeExecutionNodeResultOutput `json:"output,omitempty" url:"output,omitempty"`
	LogOutputId *string                        `json:"log_output_id,omitempty" url:"log_output_id,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeResultData(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeResultOutput struct {
	Type          string
	String        *CodeExecutionNodeStringResult
	Number        *CodeExecutionNodeNumberResult
	Json          *CodeExecutionNodeJsonResult
	ChatHistory   *CodeExecutionNodeChatHistoryResult
	SearchResults *CodeExecutionNodeSearchResultsResult
	Error         *CodeExecutionNodeErrorResult
	Array         *CodeExecutionNodeArrayResult
	FunctionCall  *CodeExecutionNodeFunctionCallResult
}

func (c *CodeExecutionNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	c.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(CodeExecutionNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.String = value
	case "NUMBER":
		value := new(CodeExecutionNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Number = value
	case "JSON":
		value := new(CodeExecutionNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Json = value
	case "CHAT_HISTORY":
		value := new(CodeExecutionNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(CodeExecutionNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.SearchResults = value
	case "ERROR":
		value := new(CodeExecutionNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Error = value
	case "ARRAY":
		value := new(CodeExecutionNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.Array = value
	case "FUNCTION_CALL":
		value := new(CodeExecutionNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		c.FunctionCall = value
	}
	return nil
}

func (c CodeExecutionNodeResultOutput) MarshalJSON() ([]byte, error) {
	if c.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeStringResult
		}{
			Type:                          "STRING",
			CodeExecutionNodeStringResult: c.String,
		}
		return json.Marshal(marshaler)
	}
	if c.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeNumberResult
		}{
			Type:                          "NUMBER",
			CodeExecutionNodeNumberResult: c.Number,
		}
		return json.Marshal(marshaler)
	}
	if c.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeJsonResult
		}{
			Type:                        "JSON",
			CodeExecutionNodeJsonResult: c.Json,
		}
		return json.Marshal(marshaler)
	}
	if c.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeChatHistoryResult
		}{
			Type:                               "CHAT_HISTORY",
			CodeExecutionNodeChatHistoryResult: c.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if c.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeSearchResultsResult
		}{
			Type:                                 "SEARCH_RESULTS",
			CodeExecutionNodeSearchResultsResult: c.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if c.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeErrorResult
		}{
			Type:                         "ERROR",
			CodeExecutionNodeErrorResult: c.Error,
		}
		return json.Marshal(marshaler)
	}
	if c.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeArrayResult
		}{
			Type:                         "ARRAY",
			CodeExecutionNodeArrayResult: c.Array,
		}
		return json.Marshal(marshaler)
	}
	if c.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeFunctionCallResult
		}{
			Type:                                "FUNCTION_CALL",
			CodeExecutionNodeFunctionCallResult: c.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CodeExecutionNodeResultOutputVisitor interface {
	VisitString(*CodeExecutionNodeStringResult) error
	VisitNumber(*CodeExecutionNodeNumberResult) error
	VisitJson(*CodeExecutionNodeJsonResult) error
	VisitChatHistory(*CodeExecutionNodeChatHistoryResult) error
	VisitSearchResults(*CodeExecutionNodeSearchResultsResult) error
	VisitError(*CodeExecutionNodeErrorResult) error
	VisitArray(*CodeExecutionNodeArrayResult) error
	VisitFunctionCall(*CodeExecutionNodeFunctionCallResult) error
}

func (c *CodeExecutionNodeResultOutput) Accept(visitor CodeExecutionNodeResultOutputVisitor) error {
	if c.String != nil {
		return visitor.VisitString(c.String)
	}
	if c.Number != nil {
		return visitor.VisitNumber(c.Number)
	}
	if c.Json != nil {
		return visitor.VisitJson(c.Json)
	}
	if c.ChatHistory != nil {
		return visitor.VisitChatHistory(c.ChatHistory)
	}
	if c.SearchResults != nil {
		return visitor.VisitSearchResults(c.SearchResults)
	}
	if c.Error != nil {
		return visitor.VisitError(c.Error)
	}
	if c.Array != nil {
		return visitor.VisitArray(c.Array)
	}
	if c.FunctionCall != nil {
		return visitor.VisitFunctionCall(c.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", c)
}

type CodeExecutionNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeSearchResultsResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeSearchResultsResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CodeExecutionNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CodeExecutionNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler CodeExecutionNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CodeExecutionNodeStringResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CodeExecutionNodeStringResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A Node Result Event emitted from a Conditional Node.
type ConditionalNodeResult struct {
	Data *ConditionalNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConditionalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResult(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResult) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ConditionalNodeResultData struct {
	SourceHandleId *string `json:"source_handle_id,omitempty" url:"source_handle_id,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ConditionalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler ConditionalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ConditionalNodeResultData(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ConditionalNodeResultData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeploymentProviderPayloadResponse struct {
	Payload map[string]interface{} `json:"payload,omitempty" url:"payload,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeploymentProviderPayloadResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeploymentProviderPayloadResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeploymentProviderPayloadResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentProviderPayloadResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables,omitempty" url:"input_variables,omitempty"`
	// Deprecated. The Prompt execution endpoints return a `prompt_version_id` that could be used instead.
	ActiveModelVersionIds []string `json:"active_model_version_ids,omitempty" url:"active_model_version_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeploymentRead) UnmarshalJSON(data []byte) error {
	type embed DeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DeploymentRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()
	d.LastDeployedOn = unmarshaler.LastDeployedOn.Time()
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeploymentRead) MarshalJSON() ([]byte, error) {
	type embed DeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*d),
		Created:        core.NewDateTime(d.Created),
		LastDeployedOn: core.NewDateTime(d.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (d *DeploymentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentDocumentToDocumentIndex struct {
	// Vellum-generated ID that uniquely identifies this link.
	Id string `json:"id" url:"id"`
	// Vellum-generated ID that uniquely identifies the index this document is included in.
	DocumentIndexId string `json:"document_index_id" url:"document_index_id"`
	// An enum value representing where this document is along its indexing lifecycle for this index.
	//
	// - `AWAITING_PROCESSING` - Awaiting Processing
	// - `QUEUED` - Queued
	// - `INDEXING` - Indexing
	// - `INDEXED` - Indexed
	// - `FAILED` - Failed
	IndexingState *IndexingStateEnum `json:"indexing_state,omitempty" url:"indexing_state,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentDocumentToDocumentIndex) UnmarshalJSON(data []byte) error {
	type unmarshaler DocumentDocumentToDocumentIndex
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocumentDocumentToDocumentIndex(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentDocumentToDocumentIndex) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentIndexRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the document index
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this index within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the document index
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this document index is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	// Configuration representing how documents should be indexed
	IndexingConfig map[string]interface{} `json:"indexing_config,omitempty" url:"indexing_config,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentIndexRead) UnmarshalJSON(data []byte) error {
	type embed DocumentIndexRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentIndexRead(unmarshaler.embed)
	d.Created = unmarshaler.Created.Time()
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentIndexRead) MarshalJSON() ([]byte, error) {
	type embed DocumentIndexRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*d),
		Created: core.NewDateTime(d.Created),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentIndexRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentRead struct {
	Id string `json:"id" url:"id"`
	// The unique id of this document as it exists in the user's system.
	ExternalId     *string   `json:"external_id,omitempty" url:"external_id,omitempty"`
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// A human-readable label for the document. Defaults to the originally uploaded file's file name.
	Label string `json:"label" url:"label"`
	// The current processing state of the document
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// The current status of the document
	//
	// - `ACTIVE` - Active
	Status                    *DocumentStatus                    `json:"status,omitempty" url:"status,omitempty"`
	OriginalFileUrl           *string                            `json:"original_file_url,omitempty" url:"original_file_url,omitempty"`
	ProcessedFileUrl          *string                            `json:"processed_file_url,omitempty" url:"processed_file_url,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes,omitempty" url:"document_to_document_indexes,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DocumentRead) UnmarshalJSON(data []byte) error {
	type embed DocumentRead
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*d),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*d = DocumentRead(unmarshaler.embed)
	d.LastUploadedAt = unmarshaler.LastUploadedAt.Time()
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocumentRead) MarshalJSON() ([]byte, error) {
	type embed DocumentRead
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*d),
		LastUploadedAt: core.NewDateTime(d.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (d *DocumentRead) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DocumentStatus = string

type EnrichedNormalizedCompletion struct {
	// The Vellum-generated ID of the completion.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided along with the generation request, which uniquely identifies this generation in an external system.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// The text generated by the LLM.
	Text string `json:"text" url:"text"`
	// The reason the generation finished.
	//
	// - `LENGTH` - LENGTH
	// - `STOP` - STOP
	// - `UNKNOWN` - UNKNOWN
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`
	// The logprobs of the completion. Only present if specified in the original request options.
	Logprobs *NormalizedLogProbs `json:"logprobs,omitempty" url:"logprobs,omitempty"`
	// The ID of the model version used to generate this completion.
	ModelVersionId       string              `json:"model_version_id" url:"model_version_id"`
	PromptVersionId      string              `json:"prompt_version_id" url:"prompt_version_id"`
	Type                 *VellumVariableType `json:"type,omitempty" url:"type,omitempty"`
	DeploymentReleaseTag string              `json:"deployment_release_tag" url:"deployment_release_tag"`
	ModelName            string              `json:"model_name" url:"model_name"`

	_rawJSON json.RawMessage
}

func (e *EnrichedNormalizedCompletion) UnmarshalJSON(data []byte) error {
	type unmarshaler EnrichedNormalizedCompletion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnrichedNormalizedCompletion(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnrichedNormalizedCompletion) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// - `ACTIVE` - Active
// - `ARCHIVED` - Archived
type EntityStatus string

const (
	EntityStatusActive   EntityStatus = "ACTIVE"
	EntityStatusArchived EntityStatus = "ARCHIVED"
)

func NewEntityStatusFromString(s string) (EntityStatus, error) {
	switch s {
	case "ACTIVE":
		return EntityStatusActive, nil
	case "ARCHIVED":
		return EntityStatusArchived, nil
	}
	var t EntityStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityStatus) Ptr() *EntityStatus {
	return &e
}

// - `DEVELOPMENT` - Development
// - `STAGING` - Staging
// - `PRODUCTION` - Production
type EnvironmentEnum string

const (
	EnvironmentEnumDevelopment EnvironmentEnum = "DEVELOPMENT"
	EnvironmentEnumStaging     EnvironmentEnum = "STAGING"
	EnvironmentEnumProduction  EnvironmentEnum = "PRODUCTION"
)

func NewEnvironmentEnumFromString(s string) (EnvironmentEnum, error) {
	switch s {
	case "DEVELOPMENT":
		return EnvironmentEnumDevelopment, nil
	case "STAGING":
		return EnvironmentEnumStaging, nil
	case "PRODUCTION":
		return EnvironmentEnumProduction, nil
	}
	var t EnvironmentEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EnvironmentEnum) Ptr() *EnvironmentEnum {
	return &e
}

type ErrorEnum = string

type ErrorVariableValue struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorVariableValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorVariableValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptApiErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (e *ExecutePromptApiErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutePromptApiErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutePromptApiErrorResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutePromptApiErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutePromptEvent struct {
	State     string
	Initiated *InitiatedExecutePromptEvent
	Streaming *StreamingExecutePromptEvent
	Fulfilled *FulfilledExecutePromptEvent
	Rejected  *RejectedExecutePromptEvent
}

func (e *ExecutePromptEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "INITIATED":
		value := new(InitiatedExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Initiated = value
	case "STREAMING":
		value := new(StreamingExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Streaming = value
	case "FULFILLED":
		value := new(FulfilledExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecutePromptEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecutePromptEvent) MarshalJSON() ([]byte, error) {
	if e.Initiated != nil {
		var marshaler = struct {
			State string `json:"state"`
			*InitiatedExecutePromptEvent
		}{
			State:                       "INITIATED",
			InitiatedExecutePromptEvent: e.Initiated,
		}
		return json.Marshal(marshaler)
	}
	if e.Streaming != nil {
		var marshaler = struct {
			State string `json:"state"`
			*StreamingExecutePromptEvent
		}{
			State:                       "STREAMING",
			StreamingExecutePromptEvent: e.Streaming,
		}
		return json.Marshal(marshaler)
	}
	if e.Fulfilled != nil {
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledExecutePromptEvent
		}{
			State:                       "FULFILLED",
			FulfilledExecutePromptEvent: e.Fulfilled,
		}
		return json.Marshal(marshaler)
	}
	if e.Rejected != nil {
		var marshaler = struct {
			State string `json:"state"`
			*RejectedExecutePromptEvent
		}{
			State:                      "REJECTED",
			RejectedExecutePromptEvent: e.Rejected,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptEventVisitor interface {
	VisitInitiated(*InitiatedExecutePromptEvent) error
	VisitStreaming(*StreamingExecutePromptEvent) error
	VisitFulfilled(*FulfilledExecutePromptEvent) error
	VisitRejected(*RejectedExecutePromptEvent) error
}

func (e *ExecutePromptEvent) Accept(visitor ExecutePromptEventVisitor) error {
	if e.Initiated != nil {
		return visitor.VisitInitiated(e.Initiated)
	}
	if e.Streaming != nil {
		return visitor.VisitStreaming(e.Streaming)
	}
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptResponse struct {
	State     string
	Fulfilled *FulfilledExecutePromptResponse
	Rejected  *RejectedExecutePromptResponse
}

func (e *ExecutePromptResponse) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "FULFILLED":
		value := new(FulfilledExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecutePromptResponse)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecutePromptResponse) MarshalJSON() ([]byte, error) {
	if e.Fulfilled != nil {
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledExecutePromptResponse
		}{
			State:                          "FULFILLED",
			FulfilledExecutePromptResponse: e.Fulfilled,
		}
		return json.Marshal(marshaler)
	}
	if e.Rejected != nil {
		var marshaler = struct {
			State string `json:"state"`
			*RejectedExecutePromptResponse
		}{
			State:                         "REJECTED",
			RejectedExecutePromptResponse: e.Rejected,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutePromptResponseVisitor interface {
	VisitFulfilled(*FulfilledExecutePromptResponse) error
	VisitRejected(*RejectedExecutePromptResponse) error
}

func (e *ExecutePromptResponse) Accept(visitor ExecutePromptResponseVisitor) error {
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecuteWorkflowErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (e *ExecuteWorkflowErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowErrorResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowResponse struct {
	ExecutionId string                              `json:"execution_id" url:"execution_id"`
	RunId       *string                             `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                             `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *ExecuteWorkflowWorkflowResultEvent `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecuteWorkflowResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowStreamErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (e *ExecuteWorkflowStreamErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecuteWorkflowStreamErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecuteWorkflowStreamErrorResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecuteWorkflowStreamErrorResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecuteWorkflowWorkflowResultEvent struct {
	State     string
	Fulfilled *FulfilledExecuteWorkflowWorkflowResultEvent
	Rejected  *RejectedExecuteWorkflowWorkflowResultEvent
}

func (e *ExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.State = unmarshaler.State
	switch unmarshaler.State {
	case "FULFILLED":
		value := new(FulfilledExecuteWorkflowWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Fulfilled = value
	case "REJECTED":
		value := new(RejectedExecuteWorkflowWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Rejected = value
	}
	return nil
}

func (e ExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	if e.Fulfilled != nil {
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledExecuteWorkflowWorkflowResultEvent
		}{
			State: "FULFILLED",
			FulfilledExecuteWorkflowWorkflowResultEvent: e.Fulfilled,
		}
		return json.Marshal(marshaler)
	}
	if e.Rejected != nil {
		var marshaler = struct {
			State string `json:"state"`
			*RejectedExecuteWorkflowWorkflowResultEvent
		}{
			State: "REJECTED",
			RejectedExecuteWorkflowWorkflowResultEvent: e.Rejected,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecuteWorkflowWorkflowResultEventVisitor interface {
	VisitFulfilled(*FulfilledExecuteWorkflowWorkflowResultEvent) error
	VisitRejected(*RejectedExecuteWorkflowWorkflowResultEvent) error
}

func (e *ExecuteWorkflowWorkflowResultEvent) Accept(visitor ExecuteWorkflowWorkflowResultEventVisitor) error {
	if e.Fulfilled != nil {
		return visitor.VisitFulfilled(e.Fulfilled)
	}
	if e.Rejected != nil {
		return visitor.VisitRejected(e.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutionArrayVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string                    `json:"id" url:"id"`
	Name  string                    `json:"name" url:"name"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionArrayVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionArrayVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionArrayVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionArrayVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionChatHistoryVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string         `json:"id" url:"id"`
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionChatHistoryVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionChatHistoryVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionChatHistoryVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionChatHistoryVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionErrorVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string       `json:"id" url:"id"`
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionErrorVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionErrorVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionErrorVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionErrorVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionFunctionCallVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string        `json:"id" url:"id"`
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionFunctionCallVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionFunctionCallVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionFunctionCallVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionFunctionCallVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionJsonVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string                 `json:"id" url:"id"`
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionJsonVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionJsonVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionJsonVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionJsonVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionNumberVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string   `json:"id" url:"id"`
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionNumberVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionNumberVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionNumberVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionNumberVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionSearchResultsVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string          `json:"id" url:"id"`
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionSearchResultsVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionSearchResultsVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionSearchResultsVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionSearchResultsVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionStringVellumValue struct {
	// The variable's uniquely identifying internal id.
	Id    string  `json:"id" url:"id"`
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (e *ExecutionStringVellumValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ExecutionStringVellumValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExecutionStringVellumValue(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExecutionStringVellumValue) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ExecutionVellumValue struct {
	Type          string
	String        *ExecutionStringVellumValue
	Number        *ExecutionNumberVellumValue
	Json          *ExecutionJsonVellumValue
	ChatHistory   *ExecutionChatHistoryVellumValue
	SearchResults *ExecutionSearchResultsVellumValue
	Error         *ExecutionErrorVellumValue
	Array         *ExecutionArrayVellumValue
	FunctionCall  *ExecutionFunctionCallVellumValue
}

func (e *ExecutionVellumValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	e.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(ExecutionStringVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.String = value
	case "NUMBER":
		value := new(ExecutionNumberVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Number = value
	case "JSON":
		value := new(ExecutionJsonVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Json = value
	case "CHAT_HISTORY":
		value := new(ExecutionChatHistoryVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(ExecutionSearchResultsVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.SearchResults = value
	case "ERROR":
		value := new(ExecutionErrorVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Error = value
	case "ARRAY":
		value := new(ExecutionArrayVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.Array = value
	case "FUNCTION_CALL":
		value := new(ExecutionFunctionCallVellumValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		e.FunctionCall = value
	}
	return nil
}

func (e ExecutionVellumValue) MarshalJSON() ([]byte, error) {
	if e.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionStringVellumValue
		}{
			Type:                       "STRING",
			ExecutionStringVellumValue: e.String,
		}
		return json.Marshal(marshaler)
	}
	if e.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionNumberVellumValue
		}{
			Type:                       "NUMBER",
			ExecutionNumberVellumValue: e.Number,
		}
		return json.Marshal(marshaler)
	}
	if e.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionJsonVellumValue
		}{
			Type:                     "JSON",
			ExecutionJsonVellumValue: e.Json,
		}
		return json.Marshal(marshaler)
	}
	if e.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionChatHistoryVellumValue
		}{
			Type:                            "CHAT_HISTORY",
			ExecutionChatHistoryVellumValue: e.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if e.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionSearchResultsVellumValue
		}{
			Type:                              "SEARCH_RESULTS",
			ExecutionSearchResultsVellumValue: e.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if e.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionErrorVellumValue
		}{
			Type:                      "ERROR",
			ExecutionErrorVellumValue: e.Error,
		}
		return json.Marshal(marshaler)
	}
	if e.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionArrayVellumValue
		}{
			Type:                      "ARRAY",
			ExecutionArrayVellumValue: e.Array,
		}
		return json.Marshal(marshaler)
	}
	if e.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ExecutionFunctionCallVellumValue
		}{
			Type:                             "FUNCTION_CALL",
			ExecutionFunctionCallVellumValue: e.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", e)
}

type ExecutionVellumValueVisitor interface {
	VisitString(*ExecutionStringVellumValue) error
	VisitNumber(*ExecutionNumberVellumValue) error
	VisitJson(*ExecutionJsonVellumValue) error
	VisitChatHistory(*ExecutionChatHistoryVellumValue) error
	VisitSearchResults(*ExecutionSearchResultsVellumValue) error
	VisitError(*ExecutionErrorVellumValue) error
	VisitArray(*ExecutionArrayVellumValue) error
	VisitFunctionCall(*ExecutionFunctionCallVellumValue) error
}

func (e *ExecutionVellumValue) Accept(visitor ExecutionVellumValueVisitor) error {
	if e.String != nil {
		return visitor.VisitString(e.String)
	}
	if e.Number != nil {
		return visitor.VisitNumber(e.Number)
	}
	if e.Json != nil {
		return visitor.VisitJson(e.Json)
	}
	if e.ChatHistory != nil {
		return visitor.VisitChatHistory(e.ChatHistory)
	}
	if e.SearchResults != nil {
		return visitor.VisitSearchResults(e.SearchResults)
	}
	if e.Error != nil {
		return visitor.VisitError(e.Error)
	}
	if e.Array != nil {
		return visitor.VisitArray(e.Array)
	}
	if e.FunctionCall != nil {
		return visitor.VisitFunctionCall(e.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", e)
}

// - `LENGTH` - LENGTH
// - `STOP` - STOP
// - `UNKNOWN` - UNKNOWN
type FinishReasonEnum string

const (
	FinishReasonEnumLength  FinishReasonEnum = "LENGTH"
	FinishReasonEnumStop    FinishReasonEnum = "STOP"
	FinishReasonEnumUnknown FinishReasonEnum = "UNKNOWN"
)

func NewFinishReasonEnumFromString(s string) (FinishReasonEnum, error) {
	switch s {
	case "LENGTH":
		return FinishReasonEnumLength, nil
	case "STOP":
		return FinishReasonEnumStop, nil
	case "UNKNOWN":
		return FinishReasonEnumUnknown, nil
	}
	var t FinishReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinishReasonEnum) Ptr() *FinishReasonEnum {
	return &f
}

type FulfilledEnum = string

// The final data event returned indicating that the stream has ended and all final resolved values from the model can be found.
type FulfilledExecutePromptEvent struct {
	Outputs     []*PromptOutput               `json:"outputs,omitempty" url:"outputs,omitempty"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *FulfilledPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledExecutePromptEvent(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the model containing all of the resolved values generated by the prompt.
type FulfilledExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string          `json:"execution_id" url:"execution_id"`
	Outputs     []*PromptOutput `json:"outputs,omitempty" url:"outputs,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledExecutePromptResponse(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecutePromptResponse) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The successful response from the Workflow execution containing the produced outputs.
type FulfilledExecuteWorkflowWorkflowResultEvent struct {
	Id      string            `json:"id" url:"id"`
	Ts      time.Time         `json:"ts" url:"ts"`
	Outputs []*WorkflowOutput `json:"outputs,omitempty" url:"outputs,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.Time()
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*f),
		Ts:    core.NewDateTime(f.Ts),
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledExecuteWorkflowWorkflowResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FulfilledFunctionCall struct {
	Arguments map[string]interface{} `json:"arguments,omitempty" url:"arguments,omitempty"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`
	Name      string                 `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (f *FulfilledFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledFunctionCall(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledFunctionCall) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type FulfilledPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler FulfilledPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FulfilledPromptExecutionMeta(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledPromptExecutionMeta) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// An event that indicates that the node has fulfilled its execution.
type FulfilledWorkflowNodeResultEvent struct {
	Id                string                     `json:"id" url:"id"`
	NodeId            string                     `json:"node_id" url:"node_id"`
	NodeResultId      string                     `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                 `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData    `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                    `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	OutputValues      []*NodeOutputCompiledValue `json:"output_values,omitempty" url:"output_values,omitempty"`
	Mocked            *bool                      `json:"mocked,omitempty" url:"mocked,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FulfilledWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed FulfilledWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*f),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*f = FulfilledWorkflowNodeResultEvent(unmarshaler.embed)
	f.Ts = unmarshaler.Ts.TimePtr()
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FulfilledWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed FulfilledWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*f),
		Ts:    core.NewOptionalDateTime(f.Ts),
	}
	return json.Marshal(marshaler)
}

func (f *FulfilledWorkflowNodeResultEvent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FunctionCall struct {
	State     string
	Fulfilled *FulfilledFunctionCall
	Rejected  *RejectedFunctionCall
}

func (f *FunctionCall) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	f.State = unmarshaler.State
	switch unmarshaler.State {
	case "FULFILLED":
		value := new(FulfilledFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		f.Fulfilled = value
	case "REJECTED":
		value := new(RejectedFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		f.Rejected = value
	}
	return nil
}

func (f FunctionCall) MarshalJSON() ([]byte, error) {
	if f.Fulfilled != nil {
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledFunctionCall
		}{
			State:                 "FULFILLED",
			FulfilledFunctionCall: f.Fulfilled,
		}
		return json.Marshal(marshaler)
	}
	if f.Rejected != nil {
		var marshaler = struct {
			State string `json:"state"`
			*RejectedFunctionCall
		}{
			State:                "REJECTED",
			RejectedFunctionCall: f.Rejected,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", f)
}

type FunctionCallVisitor interface {
	VisitFulfilled(*FulfilledFunctionCall) error
	VisitRejected(*RejectedFunctionCall) error
}

func (f *FunctionCall) Accept(visitor FunctionCallVisitor) error {
	if f.Fulfilled != nil {
		return visitor.VisitFulfilled(f.Fulfilled)
	}
	if f.Rejected != nil {
		return visitor.VisitRejected(f.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContent struct {
	Value *FunctionCallChatMessageContentValue `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FunctionCallChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContent(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContent) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A function call value that is used in a chat message.
type FunctionCallChatMessageContentRequest struct {
	Value *FunctionCallChatMessageContentValueRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FunctionCallChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentRequest(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValue struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments,omitempty" url:"arguments,omitempty"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FunctionCallChatMessageContentValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValue(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// The final resolved function call value.
type FunctionCallChatMessageContentValueRequest struct {
	Name      string                 `json:"name" url:"name"`
	Arguments map[string]interface{} `json:"arguments,omitempty" url:"arguments,omitempty"`
	Id        *string                `json:"id,omitempty" url:"id,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FunctionCallChatMessageContentValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallChatMessageContentValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallChatMessageContentValueRequest(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallChatMessageContentValueRequest) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FunctionCallEnum = string

type FunctionCallVariableValue struct {
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FunctionCallVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler FunctionCallVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FunctionCallVariableValue(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FunctionCallVariableValue) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type GenerateErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (g *GenerateErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateErrorResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateErrorResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateOptionsRequest struct {
	// Which logprobs to include, if any. Defaults to NONE.
	//
	// - `ALL` - ALL
	// - `NONE` - NONE
	Logprobs *LogprobsEnum `json:"logprobs,omitempty" url:"logprobs,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateOptionsRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateOptionsRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateRequest struct {
	// Key/value pairs for each template variable defined in the deployment's prompt.
	InputValues map[string]interface{} `json:"input_values,omitempty" url:"input_values,omitempty"`
	// Optionally provide a list of chat messages that'll be used in place of the special chat_history variable, if included in the prompt.
	ChatHistory []*ChatMessageRequest `json:"chat_history,omitempty" url:"chat_history,omitempty"`
	// Optionally include a unique identifier for each generation, as represented outside of Vellum. Note that this should generally be a list of length one.
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateRequest(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateRequest) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResponse struct {
	// The results of each generation request.
	Results []*GenerateResult `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResult struct {
	// An object containing the resulting generation. This key will be absent if the LLM provider experienced an error.
	Data *GenerateResultData `json:"data,omitempty" url:"data,omitempty"`
	// An object containing details about the error that occurred. This key will be absent if the LLM provider did not experience an error.
	Error *GenerateResultError `json:"error,omitempty" url:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResult(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultData struct {
	// The generated completions. This will generally be a list of length one.
	Completions []*EnrichedNormalizedCompletion `json:"completions,omitempty" url:"completions,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultData(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateResultError struct {
	// The error message returned by the LLM provider.
	Message string `json:"message" url:"message"`

	_rawJSON json.RawMessage
}

func (g *GenerateResultError) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateResultError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateResultError(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateResultError) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResponse struct {
	Delta *GenerateStreamResult `json:"delta,omitempty" url:"delta,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResult struct {
	RequestIndex int                       `json:"request_index" url:"request_index"`
	Data         *GenerateStreamResultData `json:"data,omitempty" url:"data,omitempty"`
	Error        *GenerateResultError      `json:"error,omitempty" url:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResult) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResult(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResult) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenerateStreamResultData struct {
	CompletionIndex int                           `json:"completion_index" url:"completion_index"`
	Completion      *EnrichedNormalizedCompletion `json:"completion,omitempty" url:"completion,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GenerateStreamResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenerateStreamResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenerateStreamResultData(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenerateStreamResultData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// An image value that is used in a chat message.
type ImageChatMessageContent struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (i *ImageChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageChatMessageContent(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An image value that is used in a chat message.
type ImageChatMessageContentRequest struct {
	Value *VellumImageRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (i *ImageChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageChatMessageContentRequest(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageChatMessageContentRequest) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type ImageEnum = string

// A base Vellum primitive value representing an image.
type ImageVariableValue struct {
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (i *ImageVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler ImageVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = ImageVariableValue(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *ImageVariableValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// - `AWAITING_PROCESSING` - Awaiting Processing
// - `QUEUED` - Queued
// - `INDEXING` - Indexing
// - `INDEXED` - Indexed
// - `FAILED` - Failed
type IndexingStateEnum string

const (
	IndexingStateEnumAwaitingProcessing IndexingStateEnum = "AWAITING_PROCESSING"
	IndexingStateEnumQueued             IndexingStateEnum = "QUEUED"
	IndexingStateEnumIndexing           IndexingStateEnum = "INDEXING"
	IndexingStateEnumIndexed            IndexingStateEnum = "INDEXED"
	IndexingStateEnumFailed             IndexingStateEnum = "FAILED"
)

func NewIndexingStateEnumFromString(s string) (IndexingStateEnum, error) {
	switch s {
	case "AWAITING_PROCESSING":
		return IndexingStateEnumAwaitingProcessing, nil
	case "QUEUED":
		return IndexingStateEnumQueued, nil
	case "INDEXING":
		return IndexingStateEnumIndexing, nil
	case "INDEXED":
		return IndexingStateEnumIndexed, nil
	case "FAILED":
		return IndexingStateEnumFailed, nil
	}
	var t IndexingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IndexingStateEnum) Ptr() *IndexingStateEnum {
	return &i
}

type InitiatedEnum = string

// The initial data returned indicating that the response from the model has returned and begun streaming.
type InitiatedExecutePromptEvent struct {
	Meta        *InitiatedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`

	_rawJSON json.RawMessage
}

func (i *InitiatedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedExecutePromptEvent(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedExecutePromptEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type InitiatedPromptExecutionMeta struct {
	ModelName            *string `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int    `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	_rawJSON json.RawMessage
}

func (i *InitiatedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler InitiatedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InitiatedPromptExecutionMeta(value)
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedPromptExecutionMeta) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An event that indicates that the node has initiated its execution.
type InitiatedWorkflowNodeResultEvent struct {
	Id                string                            `json:"id" url:"id"`
	NodeId            string                            `json:"node_id" url:"node_id"`
	NodeResultId      string                            `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time                        `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData           `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                           `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	InputValues       []*NodeInputVariableCompiledValue `json:"input_values,omitempty" url:"input_values,omitempty"`

	_rawJSON json.RawMessage
}

func (i *InitiatedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed InitiatedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*i),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*i = InitiatedWorkflowNodeResultEvent(unmarshaler.embed)
	i.Ts = unmarshaler.Ts.TimePtr()
	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InitiatedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed InitiatedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*i),
		Ts:    core.NewOptionalDateTime(i.Ts),
	}
	return json.Marshal(marshaler)
}

func (i *InitiatedWorkflowNodeResultEvent) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type JsonEnum = string

// A user input representing a JSON object
type JsonInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonInputRequest(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonInputRequest) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

type JsonVariableValue struct {
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (j *JsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler JsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*j = JsonVariableValue(value)
	j._rawJSON = json.RawMessage(data)
	return nil
}

func (j *JsonVariableValue) String() string {
	if len(j._rawJSON) > 0 {
		if value, err := core.StringifyJSON(j._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(j); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", j)
}

// - `=` - EQUALS
// - `!=` - DOES_NOT_EQUAL
// - `<` - LESS_THAN
// - `>` - GREATER_THAN
// - `<=` - LESS_THAN_OR_EQUAL_TO
// - `>=` - GREATER_THAN_OR_EQUAL_TO
// - `contains` - CONTAINS
// - `beginsWith` - BEGINS_WITH
// - `endsWith` - ENDS_WITH
// - `doesNotContain` - DOES_NOT_CONTAIN
// - `doesNotBeginWith` - DOES_NOT_BEGIN_WITH
// - `doesNotEndWith` - DOES_NOT_END_WITH
// - `null` - NULL
// - `notNull` - NOT_NULL
// - `in` - IN
// - `notIn` - NOT_IN
// - `between` - BETWEEN
// - `notBetween` - NOT_BETWEEN
type LogicalOperator string

const (
	// Equals
	LogicalOperatorEquals LogicalOperator = "="
	// Does not equal
	LogicalOperatorDoesNotEqual LogicalOperator = "!="
	// Less than
	LogicalOperatorLessThan LogicalOperator = "<"
	// Greater than
	LogicalOperatorGreaterThan LogicalOperator = ">"
	// Less than or equal to
	LogicalOperatorLessThanOrEqualTo LogicalOperator = "<="
	// Greater than or equal to
	LogicalOperatorGreaterThanOrEqualTo LogicalOperator = ">="
	// Contains
	LogicalOperatorContains LogicalOperator = "contains"
	// Begins with
	LogicalOperatorBeginsWith LogicalOperator = "beginsWith"
	// Ends with
	LogicalOperatorEndsWith LogicalOperator = "endsWith"
	// Does not contain
	LogicalOperatorDoesNotContain LogicalOperator = "doesNotContain"
	// Does not begin with
	LogicalOperatorDoesNotBeginWith LogicalOperator = "doesNotBeginWith"
	// Does not end with
	LogicalOperatorDoesNotEndWith LogicalOperator = "doesNotEndWith"
	// Null
	LogicalOperatorNull LogicalOperator = "null"
	// Not null
	LogicalOperatorNotNull LogicalOperator = "notNull"
	// In
	LogicalOperatorIn LogicalOperator = "in"
	// Not in
	LogicalOperatorNotIn LogicalOperator = "notIn"
	// Between
	LogicalOperatorBetween LogicalOperator = "between"
	// Not between
	LogicalOperatorNotBetween LogicalOperator = "notBetween"
)

func NewLogicalOperatorFromString(s string) (LogicalOperator, error) {
	switch s {
	case "=":
		return LogicalOperatorEquals, nil
	case "!=":
		return LogicalOperatorDoesNotEqual, nil
	case "<":
		return LogicalOperatorLessThan, nil
	case ">":
		return LogicalOperatorGreaterThan, nil
	case "<=":
		return LogicalOperatorLessThanOrEqualTo, nil
	case ">=":
		return LogicalOperatorGreaterThanOrEqualTo, nil
	case "contains":
		return LogicalOperatorContains, nil
	case "beginsWith":
		return LogicalOperatorBeginsWith, nil
	case "endsWith":
		return LogicalOperatorEndsWith, nil
	case "doesNotContain":
		return LogicalOperatorDoesNotContain, nil
	case "doesNotBeginWith":
		return LogicalOperatorDoesNotBeginWith, nil
	case "doesNotEndWith":
		return LogicalOperatorDoesNotEndWith, nil
	case "null":
		return LogicalOperatorNull, nil
	case "notNull":
		return LogicalOperatorNotNull, nil
	case "in":
		return LogicalOperatorIn, nil
	case "notIn":
		return LogicalOperatorNotIn, nil
	case "between":
		return LogicalOperatorBetween, nil
	case "notBetween":
		return LogicalOperatorNotBetween, nil
	}
	var t LogicalOperator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogicalOperator) Ptr() *LogicalOperator {
	return &l
}

// - `ALL` - ALL
// - `NONE` - NONE
type LogprobsEnum string

const (
	LogprobsEnumAll  LogprobsEnum = "ALL"
	LogprobsEnumNone LogprobsEnum = "NONE"
)

func NewLogprobsEnumFromString(s string) (LogprobsEnum, error) {
	switch s {
	case "ALL":
		return LogprobsEnumAll, nil
	case "NONE":
		return LogprobsEnumNone, nil
	}
	var t LogprobsEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l LogprobsEnum) Ptr() *LogprobsEnum {
	return &l
}

type MetadataFilterConfigRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MetadataFilterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `and` - AND
// - `or` - OR
type MetadataFilterRuleCombinator string

const (
	MetadataFilterRuleCombinatorAnd MetadataFilterRuleCombinator = "and"
	MetadataFilterRuleCombinatorOr  MetadataFilterRuleCombinator = "or"
)

func NewMetadataFilterRuleCombinatorFromString(s string) (MetadataFilterRuleCombinator, error) {
	switch s {
	case "and":
		return MetadataFilterRuleCombinatorAnd, nil
	case "or":
		return MetadataFilterRuleCombinatorOr, nil
	}
	var t MetadataFilterRuleCombinator
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MetadataFilterRuleCombinator) Ptr() *MetadataFilterRuleCombinator {
	return &m
}

type MetadataFilterRuleRequest struct {
	Combinator *MetadataFilterRuleCombinator `json:"combinator,omitempty" url:"combinator,omitempty"`
	Negated    *bool                         `json:"negated,omitempty" url:"negated,omitempty"`
	Rules      []*MetadataFilterRuleRequest  `json:"rules,omitempty" url:"rules,omitempty"`
	Field      *string                       `json:"field,omitempty" url:"field,omitempty"`
	Operator   *LogicalOperator              `json:"operator,omitempty" url:"operator,omitempty"`
	Value      *string                       `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MetadataFilterRuleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MetadataFilterRuleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MetadataFilterRuleRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MetadataFilterRuleRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionBuildConfig struct {
	// The name of the base model used to create this model version, as identified by the LLM provider.
	BaseModel string `json:"base_model" url:"base_model"`
	// Information about the sandbox snapshot that was used to create this model version, if applicable.
	SandboxSnapshot *ModelVersionSandboxSnapshot `json:"sandbox_snapshot,omitempty" url:"sandbox_snapshot,omitempty"`
	PromptVersionId *string                      `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionBuildConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionBuildConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionBuildConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionBuildConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionExecConfig struct {
	// The generation parameters that are passed to the LLM provider at runtime.
	Parameters *ModelVersionExecConfigParameters `json:"parameters,omitempty" url:"parameters,omitempty"`
	// Input variables specified in the prompt template.
	InputVariables []*VellumVariable `json:"input_variables,omitempty" url:"input_variables,omitempty"`
	// The template used to generate prompts for this model version.
	PromptTemplate      *string                  `json:"prompt_template,omitempty" url:"prompt_template,omitempty"`
	PromptBlockData     *PromptTemplateBlockData `json:"prompt_block_data,omitempty" url:"prompt_block_data,omitempty"`
	PromptSyntaxVersion *int                     `json:"prompt_syntax_version,omitempty" url:"prompt_syntax_version,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionExecConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionExecConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionExecConfigParameters struct {
	Temperature      *float64               `json:"temperature,omitempty" url:"temperature,omitempty"`
	MaxTokens        *int                   `json:"max_tokens,omitempty" url:"max_tokens,omitempty"`
	TopP             float64                `json:"top_p" url:"top_p"`
	FrequencyPenalty float64                `json:"frequency_penalty" url:"frequency_penalty"`
	PresencePenalty  float64                `json:"presence_penalty" url:"presence_penalty"`
	LogitBias        map[string]*float64    `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	Stop             []string               `json:"stop,omitempty" url:"stop,omitempty"`
	TopK             *float64               `json:"top_k,omitempty" url:"top_k,omitempty"`
	CustomParameters map[string]interface{} `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionExecConfigParameters) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionExecConfigParameters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionExecConfigParameters(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionExecConfigParameters) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelVersionRead struct {
	// Vellum-generated ID that uniquely identifies this model version.
	Id string `json:"id" url:"id"`
	// Timestamp of when this model version was created.
	Created time.Time `json:"created" url:"created"`
	// Human-friendly name for this model version.
	Label string `json:"label" url:"label"`
	// Which LLM provider this model version is associated with.
	//
	// - `ANTHROPIC` - Anthropic
	// - `AWS_BEDROCK` - AWS Bedrock
	// - `AZURE_OPENAI` - Azure OpenAI
	// - `COHERE` - Cohere
	// - `GOOGLE` - Google
	// - `HOSTED` - Hosted
	// - `MOSAICML` - MosaicML
	// - `OPENAI` - OpenAI
	// - `FIREWORKS_AI` - Fireworks AI
	// - `HUGGINGFACE` - HuggingFace
	// - `MYSTIC` - Mystic
	// - `PYQ` - Pyq
	// - `REPLICATE` - Replicate
	Provider ProviderEnum `json:"provider,omitempty" url:"provider,omitempty"`
	// The unique id of this model version as it exists in the above provider's system.
	ExternalId string `json:"external_id" url:"external_id"`
	// Configuration used to build this model version.
	BuildConfig *ModelVersionBuildConfig `json:"build_config,omitempty" url:"build_config,omitempty"`
	// Configuration used to execute this model version.
	ExecConfig *ModelVersionExecConfig     `json:"exec_config,omitempty" url:"exec_config,omitempty"`
	Status     *ModelVersionReadStatusEnum `json:"status,omitempty" url:"status,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionRead) UnmarshalJSON(data []byte) error {
	type embed ModelVersionRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = ModelVersionRead(unmarshaler.embed)
	m.Created = unmarshaler.Created.Time()
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionRead) MarshalJSON() ([]byte, error) {
	type embed ModelVersionRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*m),
		Created: core.NewDateTime(m.Created),
	}
	return json.Marshal(marshaler)
}

func (m *ModelVersionRead) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `CREATING` - Creating
// - `READY` - Ready
// - `CREATION_FAILED` - Creation Failed
// - `DISABLED` - Disabled
type ModelVersionReadStatusEnum string

const (
	ModelVersionReadStatusEnumCreating       ModelVersionReadStatusEnum = "CREATING"
	ModelVersionReadStatusEnumReady          ModelVersionReadStatusEnum = "READY"
	ModelVersionReadStatusEnumCreationFailed ModelVersionReadStatusEnum = "CREATION_FAILED"
	ModelVersionReadStatusEnumDisabled       ModelVersionReadStatusEnum = "DISABLED"
)

func NewModelVersionReadStatusEnumFromString(s string) (ModelVersionReadStatusEnum, error) {
	switch s {
	case "CREATING":
		return ModelVersionReadStatusEnumCreating, nil
	case "READY":
		return ModelVersionReadStatusEnumReady, nil
	case "CREATION_FAILED":
		return ModelVersionReadStatusEnumCreationFailed, nil
	case "DISABLED":
		return ModelVersionReadStatusEnumDisabled, nil
	}
	var t ModelVersionReadStatusEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m ModelVersionReadStatusEnum) Ptr() *ModelVersionReadStatusEnum {
	return &m
}

type ModelVersionSandboxSnapshot struct {
	// The ID of the sandbox snapshot.
	Id string `json:"id" url:"id"`
	// The index of the prompt in the sandbox snapshot.
	PromptIndex *int `json:"prompt_index,omitempty" url:"prompt_index,omitempty"`
	// The id of the prompt in the sandbox snapshot.
	PromptId  *string `json:"prompt_id,omitempty" url:"prompt_id,omitempty"`
	SandboxId *string `json:"sandbox_id,omitempty" url:"sandbox_id,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelVersionSandboxSnapshot) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelVersionSandboxSnapshot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelVersionSandboxSnapshot(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelVersionSandboxSnapshot) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type NamedTestCaseChatHistoryVariableValueRequest struct {
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseChatHistoryVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseChatHistoryVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseChatHistoryVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseErrorVariableValueRequest struct {
	Name  string              `json:"name" url:"name"`
	Value *VellumErrorRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseErrorVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseErrorVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseErrorVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseErrorVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseJsonVariableValueRequest struct {
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseJsonVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseJsonVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseJsonVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseJsonVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseNumberVariableValueRequest struct {
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseNumberVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseNumberVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseNumberVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseNumberVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseSearchResultsVariableValueRequest struct {
	Name  string                 `json:"name" url:"name"`
	Value []*SearchResultRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseSearchResultsVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseSearchResultsVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseSearchResultsVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseStringVariableValueRequest struct {
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NamedTestCaseStringVariableValueRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler NamedTestCaseStringVariableValueRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NamedTestCaseStringVariableValueRequest(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NamedTestCaseStringVariableValueRequest) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NamedTestCaseVariableValueRequest struct {
	Type          string
	String        *NamedTestCaseStringVariableValueRequest
	Number        *NamedTestCaseNumberVariableValueRequest
	Json          *NamedTestCaseJsonVariableValueRequest
	ChatHistory   *NamedTestCaseChatHistoryVariableValueRequest
	SearchResults *NamedTestCaseSearchResultsVariableValueRequest
	Error         *NamedTestCaseErrorVariableValueRequest
}

func (n *NamedTestCaseVariableValueRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NamedTestCaseStringVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NamedTestCaseNumberVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NamedTestCaseJsonVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NamedTestCaseChatHistoryVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NamedTestCaseSearchResultsVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NamedTestCaseErrorVariableValueRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	}
	return nil
}

func (n NamedTestCaseVariableValueRequest) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseStringVariableValueRequest
		}{
			Type:                                    "STRING",
			NamedTestCaseStringVariableValueRequest: n.String,
		}
		return json.Marshal(marshaler)
	}
	if n.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseNumberVariableValueRequest
		}{
			Type:                                    "NUMBER",
			NamedTestCaseNumberVariableValueRequest: n.Number,
		}
		return json.Marshal(marshaler)
	}
	if n.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseJsonVariableValueRequest
		}{
			Type:                                  "JSON",
			NamedTestCaseJsonVariableValueRequest: n.Json,
		}
		return json.Marshal(marshaler)
	}
	if n.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseChatHistoryVariableValueRequest
		}{
			Type: "CHAT_HISTORY",
			NamedTestCaseChatHistoryVariableValueRequest: n.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if n.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseSearchResultsVariableValueRequest
		}{
			Type: "SEARCH_RESULTS",
			NamedTestCaseSearchResultsVariableValueRequest: n.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if n.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NamedTestCaseErrorVariableValueRequest
		}{
			Type:                                   "ERROR",
			NamedTestCaseErrorVariableValueRequest: n.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NamedTestCaseVariableValueRequestVisitor interface {
	VisitString(*NamedTestCaseStringVariableValueRequest) error
	VisitNumber(*NamedTestCaseNumberVariableValueRequest) error
	VisitJson(*NamedTestCaseJsonVariableValueRequest) error
	VisitChatHistory(*NamedTestCaseChatHistoryVariableValueRequest) error
	VisitSearchResults(*NamedTestCaseSearchResultsVariableValueRequest) error
	VisitError(*NamedTestCaseErrorVariableValueRequest) error
}

func (n *NamedTestCaseVariableValueRequest) Accept(visitor NamedTestCaseVariableValueRequestVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeInputCompiledArrayValue struct {
	NodeInputId string                    `json:"node_input_id" url:"node_input_id"`
	Key         string                    `json:"key" url:"key"`
	Value       []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledArrayValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledArrayValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledChatHistoryValue struct {
	NodeInputId string         `json:"node_input_id" url:"node_input_id"`
	Key         string         `json:"key" url:"key"`
	Value       []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledChatHistoryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledChatHistoryValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledErrorValue struct {
	NodeInputId string       `json:"node_input_id" url:"node_input_id"`
	Key         string       `json:"key" url:"key"`
	Value       *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledErrorValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledErrorValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledFunctionCall struct {
	NodeInputId string        `json:"node_input_id" url:"node_input_id"`
	Key         string        `json:"key" url:"key"`
	Value       *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledFunctionCall(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledFunctionCall) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledJsonValue struct {
	NodeInputId string                 `json:"node_input_id" url:"node_input_id"`
	Key         string                 `json:"key" url:"key"`
	Value       map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledJsonValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledJsonValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledNumberValue struct {
	NodeInputId string   `json:"node_input_id" url:"node_input_id"`
	Key         string   `json:"key" url:"key"`
	Value       *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledNumberValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledNumberValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledSearchResultsValue struct {
	NodeInputId string          `json:"node_input_id" url:"node_input_id"`
	Key         string          `json:"key" url:"key"`
	Value       []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledSearchResultsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledSearchResultsValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputCompiledStringValue struct {
	NodeInputId string  `json:"node_input_id" url:"node_input_id"`
	Key         string  `json:"key" url:"key"`
	Value       *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeInputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeInputCompiledStringValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeInputCompiledStringValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeInputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeInputVariableCompiledValue struct {
	Type          string
	String        *NodeInputCompiledStringValue
	Number        *NodeInputCompiledNumberValue
	Json          *NodeInputCompiledJsonValue
	ChatHistory   *NodeInputCompiledChatHistoryValue
	SearchResults *NodeInputCompiledSearchResultsValue
	Error         *NodeInputCompiledErrorValue
	Array         *NodeInputCompiledArrayValue
	FunctionCall  *NodeInputCompiledFunctionCall
}

func (n *NodeInputVariableCompiledValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NodeInputCompiledStringValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NodeInputCompiledNumberValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NodeInputCompiledJsonValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NodeInputCompiledChatHistoryValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NodeInputCompiledSearchResultsValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NodeInputCompiledErrorValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "ARRAY":
		value := new(NodeInputCompiledArrayValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	case "FUNCTION_CALL":
		value := new(NodeInputCompiledFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	}
	return nil
}

func (n NodeInputVariableCompiledValue) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledStringValue
		}{
			Type:                         "STRING",
			NodeInputCompiledStringValue: n.String,
		}
		return json.Marshal(marshaler)
	}
	if n.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledNumberValue
		}{
			Type:                         "NUMBER",
			NodeInputCompiledNumberValue: n.Number,
		}
		return json.Marshal(marshaler)
	}
	if n.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledJsonValue
		}{
			Type:                       "JSON",
			NodeInputCompiledJsonValue: n.Json,
		}
		return json.Marshal(marshaler)
	}
	if n.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledChatHistoryValue
		}{
			Type:                              "CHAT_HISTORY",
			NodeInputCompiledChatHistoryValue: n.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if n.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledSearchResultsValue
		}{
			Type:                                "SEARCH_RESULTS",
			NodeInputCompiledSearchResultsValue: n.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if n.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledErrorValue
		}{
			Type:                        "ERROR",
			NodeInputCompiledErrorValue: n.Error,
		}
		return json.Marshal(marshaler)
	}
	if n.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledArrayValue
		}{
			Type:                        "ARRAY",
			NodeInputCompiledArrayValue: n.Array,
		}
		return json.Marshal(marshaler)
	}
	if n.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeInputCompiledFunctionCall
		}{
			Type:                          "FUNCTION_CALL",
			NodeInputCompiledFunctionCall: n.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeInputVariableCompiledValueVisitor interface {
	VisitString(*NodeInputCompiledStringValue) error
	VisitNumber(*NodeInputCompiledNumberValue) error
	VisitJson(*NodeInputCompiledJsonValue) error
	VisitChatHistory(*NodeInputCompiledChatHistoryValue) error
	VisitSearchResults(*NodeInputCompiledSearchResultsValue) error
	VisitError(*NodeInputCompiledErrorValue) error
	VisitArray(*NodeInputCompiledArrayValue) error
	VisitFunctionCall(*NodeInputCompiledFunctionCall) error
}

func (n *NodeInputVariableCompiledValue) Accept(visitor NodeInputVariableCompiledValueVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeOutputCompiledArrayValue struct {
	NodeOutputId string                    `json:"node_output_id" url:"node_output_id"`
	Value        []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledArrayValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledArrayValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledArrayValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledArrayValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledChatHistoryValue struct {
	NodeOutputId string         `json:"node_output_id" url:"node_output_id"`
	Value        []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledChatHistoryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledChatHistoryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledChatHistoryValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledChatHistoryValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledErrorValue struct {
	NodeOutputId string       `json:"node_output_id" url:"node_output_id"`
	Value        *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledErrorValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledErrorValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledErrorValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledErrorValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledFunctionValue struct {
	NodeOutputId string        `json:"node_output_id" url:"node_output_id"`
	Value        *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledFunctionValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledFunctionValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledFunctionValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledFunctionValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledJsonValue struct {
	NodeOutputId string                 `json:"node_output_id" url:"node_output_id"`
	Value        map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledJsonValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledJsonValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledJsonValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledJsonValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledNumberValue struct {
	NodeOutputId string   `json:"node_output_id" url:"node_output_id"`
	Value        *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledNumberValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledNumberValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledNumberValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledNumberValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledSearchResultsValue struct {
	NodeOutputId string          `json:"node_output_id" url:"node_output_id"`
	Value        []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledSearchResultsValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledSearchResultsValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledSearchResultsValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledSearchResultsValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledStringValue struct {
	NodeOutputId string  `json:"node_output_id" url:"node_output_id"`
	Value        *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NodeOutputCompiledStringValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NodeOutputCompiledStringValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NodeOutputCompiledStringValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NodeOutputCompiledStringValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NodeOutputCompiledValue struct {
	Type          string
	String        *NodeOutputCompiledStringValue
	Number        *NodeOutputCompiledNumberValue
	Json          *NodeOutputCompiledJsonValue
	ChatHistory   *NodeOutputCompiledChatHistoryValue
	SearchResults *NodeOutputCompiledSearchResultsValue
	Error         *NodeOutputCompiledErrorValue
	Array         *NodeOutputCompiledArrayValue
	FunctionCall  *NodeOutputCompiledFunctionValue
}

func (n *NodeOutputCompiledValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	n.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(NodeOutputCompiledStringValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.String = value
	case "NUMBER":
		value := new(NodeOutputCompiledNumberValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Number = value
	case "JSON":
		value := new(NodeOutputCompiledJsonValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Json = value
	case "CHAT_HISTORY":
		value := new(NodeOutputCompiledChatHistoryValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(NodeOutputCompiledSearchResultsValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.SearchResults = value
	case "ERROR":
		value := new(NodeOutputCompiledErrorValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Error = value
	case "ARRAY":
		value := new(NodeOutputCompiledArrayValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.Array = value
	case "FUNCTION_CALL":
		value := new(NodeOutputCompiledFunctionValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		n.FunctionCall = value
	}
	return nil
}

func (n NodeOutputCompiledValue) MarshalJSON() ([]byte, error) {
	if n.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledStringValue
		}{
			Type:                          "STRING",
			NodeOutputCompiledStringValue: n.String,
		}
		return json.Marshal(marshaler)
	}
	if n.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledNumberValue
		}{
			Type:                          "NUMBER",
			NodeOutputCompiledNumberValue: n.Number,
		}
		return json.Marshal(marshaler)
	}
	if n.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledJsonValue
		}{
			Type:                        "JSON",
			NodeOutputCompiledJsonValue: n.Json,
		}
		return json.Marshal(marshaler)
	}
	if n.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledChatHistoryValue
		}{
			Type:                               "CHAT_HISTORY",
			NodeOutputCompiledChatHistoryValue: n.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if n.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledSearchResultsValue
		}{
			Type:                                 "SEARCH_RESULTS",
			NodeOutputCompiledSearchResultsValue: n.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if n.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledErrorValue
		}{
			Type:                         "ERROR",
			NodeOutputCompiledErrorValue: n.Error,
		}
		return json.Marshal(marshaler)
	}
	if n.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledArrayValue
		}{
			Type:                         "ARRAY",
			NodeOutputCompiledArrayValue: n.Array,
		}
		return json.Marshal(marshaler)
	}
	if n.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*NodeOutputCompiledFunctionValue
		}{
			Type:                            "FUNCTION_CALL",
			NodeOutputCompiledFunctionValue: n.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NodeOutputCompiledValueVisitor interface {
	VisitString(*NodeOutputCompiledStringValue) error
	VisitNumber(*NodeOutputCompiledNumberValue) error
	VisitJson(*NodeOutputCompiledJsonValue) error
	VisitChatHistory(*NodeOutputCompiledChatHistoryValue) error
	VisitSearchResults(*NodeOutputCompiledSearchResultsValue) error
	VisitError(*NodeOutputCompiledErrorValue) error
	VisitArray(*NodeOutputCompiledArrayValue) error
	VisitFunctionCall(*NodeOutputCompiledFunctionValue) error
}

func (n *NodeOutputCompiledValue) Accept(visitor NodeOutputCompiledValueVisitor) error {
	if n.String != nil {
		return visitor.VisitString(n.String)
	}
	if n.Number != nil {
		return visitor.VisitNumber(n.Number)
	}
	if n.Json != nil {
		return visitor.VisitJson(n.Json)
	}
	if n.ChatHistory != nil {
		return visitor.VisitChatHistory(n.ChatHistory)
	}
	if n.SearchResults != nil {
		return visitor.VisitSearchResults(n.SearchResults)
	}
	if n.Error != nil {
		return visitor.VisitError(n.Error)
	}
	if n.Array != nil {
		return visitor.VisitArray(n.Array)
	}
	if n.FunctionCall != nil {
		return visitor.VisitFunctionCall(n.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", n)
}

type NormalizedLogProbs struct {
	Tokens     []*NormalizedTokenLogProbs `json:"tokens,omitempty" url:"tokens,omitempty"`
	Likelihood *float64                   `json:"likelihood,omitempty" url:"likelihood,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NormalizedLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedLogProbs(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NormalizedTokenLogProbs struct {
	Token       string              `json:"token" url:"token"`
	Logprob     *float64            `json:"logprob,omitempty" url:"logprob,omitempty"`
	TopLogprobs map[string]*float64 `json:"top_logprobs,omitempty" url:"top_logprobs,omitempty"`
	TextOffset  int                 `json:"text_offset" url:"text_offset"`

	_rawJSON json.RawMessage
}

func (n *NormalizedTokenLogProbs) UnmarshalJSON(data []byte) error {
	type unmarshaler NormalizedTokenLogProbs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NormalizedTokenLogProbs(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NormalizedTokenLogProbs) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NumberEnum = string

type NumberVariableValue struct {
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (n *NumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler NumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NumberVariableValue(value)
	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NumberVariableValue) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type PaginatedDocumentIndexReadList struct {
	Count    *int                 `json:"count,omitempty" url:"count,omitempty"`
	Next     *string              `json:"next,omitempty" url:"next,omitempty"`
	Previous *string              `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*DocumentIndexRead `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedDocumentIndexReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedDocumentIndexReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedDocumentIndexReadList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedDocumentIndexReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDeploymentReadList struct {
	Count    *int                  `json:"count,omitempty" url:"count,omitempty"`
	Next     *string               `json:"next,omitempty" url:"next,omitempty"`
	Previous *string               `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDeploymentRead `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSlimDeploymentReadList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDeploymentReadList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDeploymentReadList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDeploymentReadList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimDocumentList struct {
	Count    *int            `json:"count,omitempty" url:"count,omitempty"`
	Next     *string         `json:"next,omitempty" url:"next,omitempty"`
	Previous *string         `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimDocument `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSlimDocumentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimDocumentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimDocumentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimDocumentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedSlimWorkflowDeploymentList struct {
	Count    *int                      `json:"count,omitempty" url:"count,omitempty"`
	Next     *string                   `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                   `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*SlimWorkflowDeployment `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedSlimWorkflowDeploymentList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedSlimWorkflowDeploymentList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedSlimWorkflowDeploymentList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedSlimWorkflowDeploymentList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PaginatedTestSuiteRunExecutionList struct {
	Count    int                      `json:"count" url:"count"`
	Next     *string                  `json:"next,omitempty" url:"next,omitempty"`
	Previous *string                  `json:"previous,omitempty" url:"previous,omitempty"`
	Results  []*TestSuiteRunExecution `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PaginatedTestSuiteRunExecutionList) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedTestSuiteRunExecutionList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedTestSuiteRunExecutionList(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedTestSuiteRunExecutionList) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
// - `INVALID_FILE` - Invalid File
type ProcessingFailureReasonEnum string

const (
	ProcessingFailureReasonEnumExceededCharacterLimit ProcessingFailureReasonEnum = "EXCEEDED_CHARACTER_LIMIT"
	ProcessingFailureReasonEnumInvalidFile            ProcessingFailureReasonEnum = "INVALID_FILE"
)

func NewProcessingFailureReasonEnumFromString(s string) (ProcessingFailureReasonEnum, error) {
	switch s {
	case "EXCEEDED_CHARACTER_LIMIT":
		return ProcessingFailureReasonEnumExceededCharacterLimit, nil
	case "INVALID_FILE":
		return ProcessingFailureReasonEnumInvalidFile, nil
	}
	var t ProcessingFailureReasonEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingFailureReasonEnum) Ptr() *ProcessingFailureReasonEnum {
	return &p
}

// - `QUEUED` - Queued
// - `PROCESSING` - Processing
// - `PROCESSED` - Processed
// - `FAILED` - Failed
type ProcessingStateEnum string

const (
	ProcessingStateEnumQueued     ProcessingStateEnum = "QUEUED"
	ProcessingStateEnumProcessing ProcessingStateEnum = "PROCESSING"
	ProcessingStateEnumProcessed  ProcessingStateEnum = "PROCESSED"
	ProcessingStateEnumFailed     ProcessingStateEnum = "FAILED"
)

func NewProcessingStateEnumFromString(s string) (ProcessingStateEnum, error) {
	switch s {
	case "QUEUED":
		return ProcessingStateEnumQueued, nil
	case "PROCESSING":
		return ProcessingStateEnumProcessing, nil
	case "PROCESSED":
		return ProcessingStateEnumProcessed, nil
	case "FAILED":
		return ProcessingStateEnumFailed, nil
	}
	var t ProcessingStateEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProcessingStateEnum) Ptr() *ProcessingStateEnum {
	return &p
}

type PromptDeploymentExpandMetaRequestRequest struct {
	// If enabled, the response will include the model identifier representing the ML Model invoked by the Prompt Deployment.
	ModelName *bool `json:"model_name,omitempty" url:"model_name,omitempty"`
	// If enabled, the response will include the time in nanoseconds it took to execute the Prompt Deployment.
	Latency *bool `json:"latency,omitempty" url:"latency,omitempty"`
	// If enabled, the response will include the release tag of the Prompt Deployment.
	DeploymentReleaseTag *bool `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	// If enabled, the response will include the ID of the Prompt Version backing the deployment.
	PromptVersionId *bool `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`
	// If enabled, the response will include the reason provided by the model for why the execution finished.
	FinishReason *bool `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptDeploymentExpandMetaRequestRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptDeploymentExpandMetaRequestRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptDeploymentExpandMetaRequestRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptDeploymentExpandMetaRequestRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptDeploymentInputRequest struct {
	Type        string
	String      *StringInputRequest
	Json        *JsonInputRequest
	ChatHistory *ChatHistoryInputRequest
}

func (p *PromptDeploymentInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "JSON":
		value := new(JsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Json = value
	case "CHAT_HISTORY":
		value := new(ChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.ChatHistory = value
	}
	return nil
}

func (p PromptDeploymentInputRequest) MarshalJSON() ([]byte, error) {
	if p.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringInputRequest
		}{
			Type:               "STRING",
			StringInputRequest: p.String,
		}
		return json.Marshal(marshaler)
	}
	if p.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*JsonInputRequest
		}{
			Type:             "JSON",
			JsonInputRequest: p.Json,
		}
		return json.Marshal(marshaler)
	}
	if p.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ChatHistoryInputRequest
		}{
			Type:                    "CHAT_HISTORY",
			ChatHistoryInputRequest: p.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PromptDeploymentInputRequestVisitor interface {
	VisitString(*StringInputRequest) error
	VisitJson(*JsonInputRequest) error
	VisitChatHistory(*ChatHistoryInputRequest) error
}

func (p *PromptDeploymentInputRequest) Accept(visitor PromptDeploymentInputRequestVisitor) error {
	if p.String != nil {
		return visitor.VisitString(p.String)
	}
	if p.Json != nil {
		return visitor.VisitJson(p.Json)
	}
	if p.ChatHistory != nil {
		return visitor.VisitChatHistory(p.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type PromptExecutionMeta struct {
	ModelName            *string           `json:"model_name,omitempty" url:"model_name,omitempty"`
	Latency              *int              `json:"latency,omitempty" url:"latency,omitempty"`
	DeploymentReleaseTag *string           `json:"deployment_release_tag,omitempty" url:"deployment_release_tag,omitempty"`
	PromptVersionId      *string           `json:"prompt_version_id,omitempty" url:"prompt_version_id,omitempty"`
	FinishReason         *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptExecutionMeta(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptExecutionMeta) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A Node Result Event emitted from a Prompt Node.
type PromptNodeResult struct {
	Data *PromptNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResult(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResult) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptNodeResultData struct {
	OutputId      string  `json:"output_id" url:"output_id"`
	ArrayOutputId *string `json:"array_output_id,omitempty" url:"array_output_id,omitempty"`
	Text          *string `json:"text,omitempty" url:"text,omitempty"`
	Delta         *string `json:"delta,omitempty" url:"delta,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptNodeResultData(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptNodeResultData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptOutput struct {
	Type         string
	String       *StringVariableValue
	Json         *JsonVariableValue
	Error        *ErrorVariableValue
	FunctionCall *FunctionCallVariableValue
}

func (p *PromptOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	p.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(StringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.String = value
	case "JSON":
		value := new(JsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Json = value
	case "ERROR":
		value := new(ErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.Error = value
	case "FUNCTION_CALL":
		value := new(FunctionCallVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		p.FunctionCall = value
	}
	return nil
}

func (p PromptOutput) MarshalJSON() ([]byte, error) {
	if p.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*StringVariableValue
		}{
			Type:                "STRING",
			StringVariableValue: p.String,
		}
		return json.Marshal(marshaler)
	}
	if p.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*JsonVariableValue
		}{
			Type:              "JSON",
			JsonVariableValue: p.Json,
		}
		return json.Marshal(marshaler)
	}
	if p.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ErrorVariableValue
		}{
			Type:               "ERROR",
			ErrorVariableValue: p.Error,
		}
		return json.Marshal(marshaler)
	}
	if p.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*FunctionCallVariableValue
		}{
			Type:                      "FUNCTION_CALL",
			FunctionCallVariableValue: p.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PromptOutputVisitor interface {
	VisitString(*StringVariableValue) error
	VisitJson(*JsonVariableValue) error
	VisitError(*ErrorVariableValue) error
	VisitFunctionCall(*FunctionCallVariableValue) error
}

func (p *PromptOutput) Accept(visitor PromptOutputVisitor) error {
	if p.String != nil {
		return visitor.VisitString(p.String)
	}
	if p.Json != nil {
		return visitor.VisitJson(p.Json)
	}
	if p.Error != nil {
		return visitor.VisitError(p.Error)
	}
	if p.FunctionCall != nil {
		return visitor.VisitFunctionCall(p.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", p)
}

type PromptTemplateBlock struct {
	Id         string                         `json:"id" url:"id"`
	BlockType  BlockTypeEnum                  `json:"block_type,omitempty" url:"block_type,omitempty"`
	Properties *PromptTemplateBlockProperties `json:"properties,omitempty" url:"properties,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlock) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlock
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlock(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlock) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockData struct {
	Version int                    `json:"version" url:"version"`
	Blocks  []*PromptTemplateBlock `json:"blocks,omitempty" url:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockData) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockData(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockDataRequest struct {
	Version int                           `json:"version" url:"version"`
	Blocks  []*PromptTemplateBlockRequest `json:"blocks,omitempty" url:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockDataRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockDataRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockProperties struct {
	ChatRole                *ChatMessageRole       `json:"chat_role,omitempty" url:"chat_role,omitempty"`
	ChatMessageUnterminated *bool                  `json:"chat_message_unterminated,omitempty" url:"chat_message_unterminated,omitempty"`
	ChatSource              *string                `json:"chat_source,omitempty" url:"chat_source,omitempty"`
	Template                *string                `json:"template,omitempty" url:"template,omitempty"`
	TemplateType            *VellumVariableType    `json:"template_type,omitempty" url:"template_type,omitempty"`
	FunctionName            *string                `json:"function_name,omitempty" url:"function_name,omitempty"`
	FunctionDescription     *string                `json:"function_description,omitempty" url:"function_description,omitempty"`
	FunctionParameters      map[string]interface{} `json:"function_parameters,omitempty" url:"function_parameters,omitempty"`
	FunctionForced          *bool                  `json:"function_forced,omitempty" url:"function_forced,omitempty"`
	Blocks                  []*PromptTemplateBlock `json:"blocks,omitempty" url:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockProperties(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockPropertiesRequest struct {
	ChatRole                *ChatMessageRole              `json:"chat_role,omitempty" url:"chat_role,omitempty"`
	ChatMessageUnterminated *bool                         `json:"chat_message_unterminated,omitempty" url:"chat_message_unterminated,omitempty"`
	ChatSource              *string                       `json:"chat_source,omitempty" url:"chat_source,omitempty"`
	Template                *string                       `json:"template,omitempty" url:"template,omitempty"`
	TemplateType            *VellumVariableType           `json:"template_type,omitempty" url:"template_type,omitempty"`
	FunctionName            *string                       `json:"function_name,omitempty" url:"function_name,omitempty"`
	FunctionDescription     *string                       `json:"function_description,omitempty" url:"function_description,omitempty"`
	FunctionParameters      map[string]interface{}        `json:"function_parameters,omitempty" url:"function_parameters,omitempty"`
	FunctionForced          *bool                         `json:"function_forced,omitempty" url:"function_forced,omitempty"`
	Blocks                  []*PromptTemplateBlockRequest `json:"blocks,omitempty" url:"blocks,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockPropertiesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockPropertiesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockPropertiesRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockPropertiesRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PromptTemplateBlockRequest struct {
	Id         string                                `json:"id" url:"id"`
	BlockType  BlockTypeEnum                         `json:"block_type,omitempty" url:"block_type,omitempty"`
	Properties *PromptTemplateBlockPropertiesRequest `json:"properties,omitempty" url:"properties,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PromptTemplateBlockRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler PromptTemplateBlockRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PromptTemplateBlockRequest(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PromptTemplateBlockRequest) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// - `ANTHROPIC` - Anthropic
// - `AWS_BEDROCK` - AWS Bedrock
// - `AZURE_OPENAI` - Azure OpenAI
// - `COHERE` - Cohere
// - `GOOGLE` - Google
// - `HOSTED` - Hosted
// - `MOSAICML` - MosaicML
// - `OPENAI` - OpenAI
// - `FIREWORKS_AI` - Fireworks AI
// - `HUGGINGFACE` - HuggingFace
// - `MYSTIC` - Mystic
// - `PYQ` - Pyq
// - `REPLICATE` - Replicate
type ProviderEnum string

const (
	ProviderEnumAnthropic   ProviderEnum = "ANTHROPIC"
	ProviderEnumAwsBedrock  ProviderEnum = "AWS_BEDROCK"
	ProviderEnumAzureOpenai ProviderEnum = "AZURE_OPENAI"
	ProviderEnumCohere      ProviderEnum = "COHERE"
	ProviderEnumGoogle      ProviderEnum = "GOOGLE"
	ProviderEnumHosted      ProviderEnum = "HOSTED"
	ProviderEnumMosaicml    ProviderEnum = "MOSAICML"
	ProviderEnumOpenai      ProviderEnum = "OPENAI"
	ProviderEnumFireworksAi ProviderEnum = "FIREWORKS_AI"
	ProviderEnumHuggingface ProviderEnum = "HUGGINGFACE"
	ProviderEnumMystic      ProviderEnum = "MYSTIC"
	ProviderEnumPyq         ProviderEnum = "PYQ"
	ProviderEnumReplicate   ProviderEnum = "REPLICATE"
)

func NewProviderEnumFromString(s string) (ProviderEnum, error) {
	switch s {
	case "ANTHROPIC":
		return ProviderEnumAnthropic, nil
	case "AWS_BEDROCK":
		return ProviderEnumAwsBedrock, nil
	case "AZURE_OPENAI":
		return ProviderEnumAzureOpenai, nil
	case "COHERE":
		return ProviderEnumCohere, nil
	case "GOOGLE":
		return ProviderEnumGoogle, nil
	case "HOSTED":
		return ProviderEnumHosted, nil
	case "MOSAICML":
		return ProviderEnumMosaicml, nil
	case "OPENAI":
		return ProviderEnumOpenai, nil
	case "FIREWORKS_AI":
		return ProviderEnumFireworksAi, nil
	case "HUGGINGFACE":
		return ProviderEnumHuggingface, nil
	case "MYSTIC":
		return ProviderEnumMystic, nil
	case "PYQ":
		return ProviderEnumPyq, nil
	case "REPLICATE":
		return ProviderEnumReplicate, nil
	}
	var t ProviderEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p ProviderEnum) Ptr() *ProviderEnum {
	return &p
}

type RawPromptExecutionOverridesRequest struct {
	Body map[string]interface{} `json:"body,omitempty" url:"body,omitempty"`
	// The raw headers to send to the model host.
	Headers map[string]*string `json:"headers,omitempty" url:"headers,omitempty"`
	// The raw URL to send to the model host.
	Url *string `json:"url,omitempty" url:"url,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RawPromptExecutionOverridesRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RawPromptExecutionOverridesRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RawPromptExecutionOverridesRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RawPromptExecutionOverridesRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptErrorResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptErrorResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptModelParametersRequest struct {
	Temperature      float64                `json:"temperature" url:"temperature"`
	MaxTokens        int                    `json:"max_tokens" url:"max_tokens"`
	Stop             []string               `json:"stop,omitempty" url:"stop,omitempty"`
	TopP             float64                `json:"top_p" url:"top_p"`
	TopK             *int                   `json:"top_k,omitempty" url:"top_k,omitempty"`
	FrequencyPenalty float64                `json:"frequency_penalty" url:"frequency_penalty"`
	PresencePenalty  float64                `json:"presence_penalty" url:"presence_penalty"`
	LogitBias        map[string]*float64    `json:"logit_bias,omitempty" url:"logit_bias,omitempty"`
	CustomParameters map[string]interface{} `json:"custom_parameters,omitempty" url:"custom_parameters,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptModelParametersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptModelParametersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptModelParametersRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptModelParametersRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptPrompt struct {
	// The ID of the generated prompt.
	Id string `json:"id" url:"id"`
	// A human-friendly label for the generated prompt.
	Label string `json:"label" url:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptPrompt) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptPrompt
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptPrompt(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptPrompt) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptPromptInfoRequest struct {
	PromptBlockData *PromptTemplateBlockDataRequest `json:"prompt_block_data,omitempty" url:"prompt_block_data,omitempty"`
	// The input variables specified in the prompt template.
	InputVariables []*RegisteredPromptInputVariableRequest `json:"input_variables,omitempty" url:"input_variables,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptPromptInfoRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptPromptInfoRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptPromptInfoRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptPromptInfoRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisterPromptResponse struct {
	// Information about the generated prompt
	Prompt *RegisterPromptPrompt `json:"prompt,omitempty" url:"prompt,omitempty"`
	// Information about the generated sandbox snapshot
	SandboxSnapshot *RegisteredPromptSandboxSnapshot `json:"sandbox_snapshot,omitempty" url:"sandbox_snapshot,omitempty"`
	// Information about the generated sandbox
	Sandbox *RegisteredPromptSandbox `json:"sandbox,omitempty" url:"sandbox,omitempty"`
	// Information about the generated model version
	ModelVersion *RegisteredPromptModelVersion `json:"model_version,omitempty" url:"model_version,omitempty"`
	// The ID of the generated prompt version
	PromptVersionId string `json:"prompt_version_id" url:"prompt_version_id"`
	// Information about the generated deployment
	Deployment *RegisteredPromptDeployment `json:"deployment,omitempty" url:"deployment,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RegisterPromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisterPromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisterPromptResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisterPromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptDeployment struct {
	// The ID of the generated deployment.
	Id string `json:"id" url:"id"`
	// A uniquely-identifying name for generated deployment.
	Name string `json:"name" url:"name"`
	// A human-friendly label for the generated deployment.
	Label string `json:"label" url:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptDeployment) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptDeployment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptDeployment(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptDeployment) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptInputVariableRequest struct {
	Key  string              `json:"key" url:"key"`
	Id   *string             `json:"id,omitempty" url:"id,omitempty"`
	Type *VellumVariableType `json:"type,omitempty" url:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptInputVariableRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptInputVariableRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptInputVariableRequest(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptInputVariableRequest) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptModelVersion struct {
	// The ID of the generated model version.
	Id string `json:"id" url:"id"`
	// A human-friendly label for the generated model version.
	Label string `json:"label" url:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptModelVersion) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptModelVersion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptModelVersion(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptModelVersion) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptSandbox struct {
	// The ID of the generated sandbox.
	Id string `json:"id" url:"id"`
	// A human-friendly label for the generated sandbox.
	Label string `json:"label" url:"label"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptSandbox) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptSandbox
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptSandbox(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptSandbox) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RegisteredPromptSandboxSnapshot struct {
	// The ID of the generated sandbox snapshot.
	Id string `json:"id" url:"id"`

	_rawJSON json.RawMessage
}

func (r *RegisteredPromptSandboxSnapshot) UnmarshalJSON(data []byte) error {
	type unmarshaler RegisteredPromptSandboxSnapshot
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegisteredPromptSandboxSnapshot(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegisteredPromptSandboxSnapshot) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RejectedEnum = string

// The final data returned indicating an error occurred during the stream.
type RejectedExecutePromptEvent struct {
	Error       *VellumError                 `json:"error,omitempty" url:"error,omitempty"`
	ExecutionId string                       `json:"execution_id" url:"execution_id"`
	Meta        *RejectedPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptEvent(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the model containing an error of what went wrong.
type RejectedExecutePromptResponse struct {
	Meta *PromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`
	// The ID of the execution.
	ExecutionId string       `json:"execution_id" url:"execution_id"`
	Error       *VellumError `json:"error,omitempty" url:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedExecutePromptResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedExecutePromptResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedExecutePromptResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecutePromptResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The unsuccessful response from the Workflow execution containing an error specifying what went wrong.
type RejectedExecuteWorkflowWorkflowResultEvent struct {
	Id    string              `json:"id" url:"id"`
	Ts    time.Time           `json:"ts" url:"ts"`
	Error *WorkflowEventError `json:"error,omitempty" url:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedExecuteWorkflowWorkflowResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.Time()
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedExecuteWorkflowWorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*r),
		Ts:    core.NewDateTime(r.Ts),
	}
	return json.Marshal(marshaler)
}

func (r *RejectedExecuteWorkflowWorkflowResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Returned if the function call failed to parse for some reason.
type RejectedFunctionCall struct {
	Error *VellumError `json:"error,omitempty" url:"error,omitempty"`
	Id    *string      `json:"id,omitempty" url:"id,omitempty"`
	Name  string       `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (r *RejectedFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedFunctionCall(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedFunctionCall) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type RejectedPromptExecutionMeta struct {
	Latency      *int              `json:"latency,omitempty" url:"latency,omitempty"`
	FinishReason *FinishReasonEnum `json:"finish_reason,omitempty" url:"finish_reason,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler RejectedPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RejectedPromptExecutionMeta(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedPromptExecutionMeta) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An event that indicates that the node has rejected its execution.
type RejectedWorkflowNodeResultEvent struct {
	Id                string                  `json:"id" url:"id"`
	NodeId            string                  `json:"node_id" url:"node_id"`
	NodeResultId      string                  `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time              `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                 `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Error             *WorkflowEventError     `json:"error,omitempty" url:"error,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RejectedWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed RejectedWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*r),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*r = RejectedWorkflowNodeResultEvent(unmarshaler.embed)
	r.Ts = unmarshaler.Ts.TimePtr()
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RejectedWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed RejectedWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*r),
		Ts:    core.NewOptionalDateTime(r.Ts),
	}
	return json.Marshal(marshaler)
}

func (r *RejectedWorkflowNodeResultEvent) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SandboxScenario struct {
	Label *string `json:"label,omitempty" url:"label,omitempty"`
	// The inputs for the scenario
	Inputs []*ScenarioInput `json:"inputs,omitempty" url:"inputs,omitempty"`
	// The id of the scenario
	Id string `json:"id" url:"id"`

	_rawJSON json.RawMessage
}

func (s *SandboxScenario) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxScenario
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxScenario(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxScenario) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInput struct {
	Key         string                 `json:"key" url:"key"`
	Type        *ScenarioInputTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	Value       *string                `json:"value,omitempty" url:"value,omitempty"`
	ChatHistory []*ChatMessage         `json:"chat_history,omitempty" url:"chat_history,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScenarioInput) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInput(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInput) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInputRequest struct {
	Key         string                 `json:"key" url:"key"`
	Type        *ScenarioInputTypeEnum `json:"type,omitempty" url:"type,omitempty"`
	Value       *string                `json:"value,omitempty" url:"value,omitempty"`
	ChatHistory []*ChatMessageRequest  `json:"chat_history,omitempty" url:"chat_history,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScenarioInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInputRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// - `TEXT` - TEXT
// - `CHAT_HISTORY` - CHAT_HISTORY
type ScenarioInputTypeEnum string

const (
	ScenarioInputTypeEnumText        ScenarioInputTypeEnum = "TEXT"
	ScenarioInputTypeEnumChatHistory ScenarioInputTypeEnum = "CHAT_HISTORY"
)

func NewScenarioInputTypeEnumFromString(s string) (ScenarioInputTypeEnum, error) {
	switch s {
	case "TEXT":
		return ScenarioInputTypeEnumText, nil
	case "CHAT_HISTORY":
		return ScenarioInputTypeEnumChatHistory, nil
	}
	var t ScenarioInputTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s ScenarioInputTypeEnum) Ptr() *ScenarioInputTypeEnum {
	return &s
}

type SearchErrorResponse struct {
	// Details about why the request failed.
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (s *SearchErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchErrorResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchErrorResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchFiltersRequest struct {
	// The document external IDs to filter by
	ExternalIds []string `json:"external_ids,omitempty" url:"external_ids,omitempty"`
	// The metadata filters to apply to the search
	Metadata *MetadataFilterConfigRequest `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchFiltersRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchFiltersRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchFiltersRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchFiltersRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A Node Result Event emitted from a Search Node.
type SearchNodeResult struct {
	Data *SearchNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResult(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchNodeResultData struct {
	ResultsOutputId string `json:"results_output_id" url:"results_output_id"`
	// The results of the search. Each result represents a chunk that matches the search query.
	Results      []*SearchResult `json:"results,omitempty" url:"results,omitempty"`
	TextOutputId string          `json:"text_output_id" url:"text_output_id"`
	Text         *string         `json:"text,omitempty" url:"text,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchNodeResultData(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchNodeResultData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchRequestOptionsRequest struct {
	// The maximum number of results to return.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`
	// The weights to use for the search. Must add up to 1.0.
	Weights *SearchWeightsRequest `json:"weights,omitempty" url:"weights,omitempty"`
	// The configuration for merging results.
	ResultMerging *SearchResultMergingRequest `json:"result_merging,omitempty" url:"result_merging,omitempty"`
	// The filters to apply to the search.
	Filters *SearchFiltersRequest `json:"filters,omitempty" url:"filters,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchRequestOptionsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchRequestOptionsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchRequestOptionsRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchRequestOptionsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResponse struct {
	// The results of the search. Each result represents a chunk that matches the search query.
	Results []*SearchResult `json:"results,omitempty" url:"results,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResult struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords,omitempty" url:"keywords,omitempty"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocument `json:"document,omitempty" url:"document,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResult(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocument struct {
	// The ID of the document.
	Id string `json:"id" url:"id"`
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultDocument) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocument
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocument(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultDocumentRequest struct {
	// The human-readable name for the document.
	Label string `json:"label" url:"label"`
	// The unique ID of the document as represented in an external system and specified when it was originally uploaded.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultDocumentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultDocumentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultDocumentRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultDocumentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultMergingRequest struct {
	// Whether to enable merging results
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultMergingRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultMergingRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultMergingRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultMergingRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultRequest struct {
	// The text of the chunk that matched the search query.
	Text string `json:"text" url:"text"`
	// A score representing how well the chunk matches the search query.
	Score    float64  `json:"score" url:"score"`
	Keywords []string `json:"keywords,omitempty" url:"keywords,omitempty"`
	// The document that contains the chunk that matched the search query.
	Document *SearchResultDocumentRequest `json:"document,omitempty" url:"document,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchResultsEnum = string

type SearchResultsVariableValue struct {
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResultsVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResultsVariableValue(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResultsVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchWeightsRequest struct {
	// The relative weight to give to semantic similarity
	SemanticSimilarity *float64 `json:"semantic_similarity,omitempty" url:"semantic_similarity,omitempty"`
	// The relative weight to give to keywords
	Keywords *float64 `json:"keywords,omitempty" url:"keywords,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SearchWeightsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchWeightsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchWeightsRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchWeightsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDeploymentRead struct {
	Id      string    `json:"id" url:"id"`
	Created time.Time `json:"created" url:"created"`
	// A human-readable label for the deployment
	Label string `json:"label" url:"label"`
	// A name that uniquely identifies this deployment within its workspace
	Name string `json:"name" url:"name"`
	// The current status of the deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum  `json:"environment,omitempty" url:"environment,omitempty"`
	LastDeployedOn time.Time         `json:"last_deployed_on" url:"last_deployed_on"`
	InputVariables []*VellumVariable `json:"input_variables,omitempty" url:"input_variables,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SlimDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed SlimDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDeploymentRead(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed SlimDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDeploymentRead) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimDocument struct {
	// Vellum-generated ID that uniquely identifies this document.
	Id string `json:"id" url:"id"`
	// The external ID that was originally provided when uploading the document.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// A timestamp representing when this document was most recently uploaded.
	LastUploadedAt time.Time `json:"last_uploaded_at" url:"last_uploaded_at"`
	// Human-friendly name for this document.
	Label string `json:"label" url:"label"`
	// An enum value representing where this document is along its processing lifecycle. Note that this is different than its indexing lifecycle.
	//
	// - `QUEUED` - Queued
	// - `PROCESSING` - Processing
	// - `PROCESSED` - Processed
	// - `FAILED` - Failed
	ProcessingState *ProcessingStateEnum `json:"processing_state,omitempty" url:"processing_state,omitempty"`
	// An enum value representing why the document could not be processed. Is null unless processing_state is FAILED.
	//
	// - `EXCEEDED_CHARACTER_LIMIT` - Exceeded Character Limit
	// - `INVALID_FILE` - Invalid File
	ProcessingFailureReason *ProcessingFailureReasonEnum `json:"processing_failure_reason,omitempty" url:"processing_failure_reason,omitempty"`
	// The document's current status.
	//
	// - `ACTIVE` - Active
	Status *DocumentStatus `json:"status,omitempty" url:"status,omitempty"`
	// A list of keywords associated with this document. Originally provided when uploading the document.
	Keywords []string `json:"keywords,omitempty" url:"keywords,omitempty"`
	// A previously supplied JSON object containing metadata that can be filtered on when searching.
	Metadata                  map[string]interface{}             `json:"metadata,omitempty" url:"metadata,omitempty"`
	DocumentToDocumentIndexes []*DocumentDocumentToDocumentIndex `json:"document_to_document_indexes,omitempty" url:"document_to_document_indexes,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SlimDocument) UnmarshalJSON(data []byte) error {
	type embed SlimDocument
	var unmarshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimDocument(unmarshaler.embed)
	s.LastUploadedAt = unmarshaler.LastUploadedAt.Time()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimDocument) MarshalJSON() ([]byte, error) {
	type embed SlimDocument
	var marshaler = struct {
		embed
		LastUploadedAt *core.DateTime `json:"last_uploaded_at"`
	}{
		embed:          embed(*s),
		LastUploadedAt: core.NewDateTime(s.LastUploadedAt),
	}
	return json.Marshal(marshaler)
}

func (s *SlimDocument) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SlimWorkflowDeployment struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables,omitempty" url:"input_variables,omitempty"`
	// The output variables this Workflow Deployment will produce when it is executed.
	OutputVariables []*VellumVariable `json:"output_variables,omitempty" url:"output_variables,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SlimWorkflowDeployment) UnmarshalJSON(data []byte) error {
	type embed SlimWorkflowDeployment
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SlimWorkflowDeployment(unmarshaler.embed)
	s.Created = unmarshaler.Created.Time()
	s.LastDeployedOn = unmarshaler.LastDeployedOn.Time()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SlimWorkflowDeployment) MarshalJSON() ([]byte, error) {
	type embed SlimWorkflowDeployment
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*s),
		Created:        core.NewDateTime(s.Created),
		LastDeployedOn: core.NewDateTime(s.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (s *SlimWorkflowDeployment) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StreamingEnum = string

// The data returned for each delta during the prompt execution stream.
type StreamingExecutePromptEvent struct {
	Output      *PromptOutput                 `json:"output,omitempty" url:"output,omitempty"`
	OutputIndex int                           `json:"output_index" url:"output_index"`
	ExecutionId string                        `json:"execution_id" url:"execution_id"`
	Meta        *StreamingPromptExecutionMeta `json:"meta,omitempty" url:"meta,omitempty"`
	// The subset of the raw response from the model that the request opted into with `expand_raw`.
	Raw map[string]interface{} `json:"raw,omitempty" url:"raw,omitempty"`

	_rawJSON json.RawMessage
}

func (s *StreamingExecutePromptEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingExecutePromptEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingExecutePromptEvent(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingExecutePromptEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The subset of the metadata tracked by Vellum during prompt execution that the request opted into with `expand_meta`.
type StreamingPromptExecutionMeta struct {
	Latency *int `json:"latency,omitempty" url:"latency,omitempty"`

	_rawJSON json.RawMessage
}

func (s *StreamingPromptExecutionMeta) UnmarshalJSON(data []byte) error {
	type unmarshaler StreamingPromptExecutionMeta
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StreamingPromptExecutionMeta(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingPromptExecutionMeta) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// An event that indicates that the node has execution is in progress.
type StreamingWorkflowNodeResultEvent struct {
	Id                string                   `json:"id" url:"id"`
	NodeId            string                   `json:"node_id" url:"node_id"`
	NodeResultId      string                   `json:"node_result_id" url:"node_result_id"`
	Ts                *time.Time               `json:"ts,omitempty" url:"ts,omitempty"`
	Data              *WorkflowNodeResultData  `json:"data,omitempty" url:"data,omitempty"`
	SourceExecutionId *string                  `json:"source_execution_id,omitempty" url:"source_execution_id,omitempty"`
	Output            *NodeOutputCompiledValue `json:"output,omitempty" url:"output,omitempty"`
	OutputIndex       *int                     `json:"output_index,omitempty" url:"output_index,omitempty"`

	_rawJSON json.RawMessage
}

func (s *StreamingWorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	type embed StreamingWorkflowNodeResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = StreamingWorkflowNodeResultEvent(unmarshaler.embed)
	s.Ts = unmarshaler.Ts.TimePtr()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StreamingWorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	type embed StreamingWorkflowNodeResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts,omitempty"`
	}{
		embed: embed(*s),
		Ts:    core.NewOptionalDateTime(s.Ts),
	}
	return json.Marshal(marshaler)
}

func (s *StreamingWorkflowNodeResultEvent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContent struct {
	Value string `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (s *StringChatMessageContent) UnmarshalJSON(data []byte) error {
	type unmarshaler StringChatMessageContent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringChatMessageContent(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContent) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// A string value that is used in a chat message.
type StringChatMessageContentRequest struct {
	Value string `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (s *StringChatMessageContentRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringChatMessageContentRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringChatMessageContentRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringChatMessageContentRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringEnum = string

// A user input representing a string value
type StringInputRequest struct {
	// The variable's name, as defined in the deployment.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (s *StringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler StringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringInputRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringVariableValue struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (s *StringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler StringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StringVariableValue(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StringVariableValue) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualRequest struct {
	// The Vellum-generated ID of a previously generated completion. Must provide either this or external_id.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The external ID that was originally provided when generating the completion that you'd now like to submit actuals for. Must provide either this or id.
	ExternalId *string `json:"external_id,omitempty" url:"external_id,omitempty"`
	// Text representing what the completion _should_ have been.
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// A number between 0 and 1 representing the quality of the completion. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *time.Time `json:"timestamp,omitempty" url:"timestamp,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SubmitCompletionActualRequest) UnmarshalJSON(data []byte) error {
	type embed SubmitCompletionActualRequest
	var unmarshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SubmitCompletionActualRequest(unmarshaler.embed)
	s.Timestamp = unmarshaler.Timestamp.TimePtr()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualRequest) MarshalJSON() ([]byte, error) {
	type embed SubmitCompletionActualRequest
	var marshaler = struct {
		embed
		Timestamp *core.DateTime `json:"timestamp,omitempty"`
	}{
		embed:     embed(*s),
		Timestamp: core.NewOptionalDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

func (s *SubmitCompletionActualRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitCompletionActualsErrorResponse struct {
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (s *SubmitCompletionActualsErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmitCompletionActualsErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmitCompletionActualsErrorResponse(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitCompletionActualsErrorResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SubmitWorkflowExecutionActualRequest struct {
	OutputType  string
	String      *WorkflowExecutionActualStringRequest
	Json        *WorkflowExecutionActualJsonRequest
	ChatHistory *WorkflowExecutionActualChatHistoryRequest
}

func (s *SubmitWorkflowExecutionActualRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		OutputType string `json:"output_type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	s.OutputType = unmarshaler.OutputType
	switch unmarshaler.OutputType {
	case "STRING":
		value := new(WorkflowExecutionActualStringRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.String = value
	case "JSON":
		value := new(WorkflowExecutionActualJsonRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowExecutionActualChatHistoryRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		s.ChatHistory = value
	}
	return nil
}

func (s SubmitWorkflowExecutionActualRequest) MarshalJSON() ([]byte, error) {
	if s.String != nil {
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualStringRequest
		}{
			OutputType:                           "STRING",
			WorkflowExecutionActualStringRequest: s.String,
		}
		return json.Marshal(marshaler)
	}
	if s.Json != nil {
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualJsonRequest
		}{
			OutputType:                         "JSON",
			WorkflowExecutionActualJsonRequest: s.Json,
		}
		return json.Marshal(marshaler)
	}
	if s.ChatHistory != nil {
		var marshaler = struct {
			OutputType string `json:"output_type"`
			*WorkflowExecutionActualChatHistoryRequest
		}{
			OutputType: "CHAT_HISTORY",
			WorkflowExecutionActualChatHistoryRequest: s.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SubmitWorkflowExecutionActualRequestVisitor interface {
	VisitString(*WorkflowExecutionActualStringRequest) error
	VisitJson(*WorkflowExecutionActualJsonRequest) error
	VisitChatHistory(*WorkflowExecutionActualChatHistoryRequest) error
}

func (s *SubmitWorkflowExecutionActualRequest) Accept(visitor SubmitWorkflowExecutionActualRequestVisitor) error {
	if s.String != nil {
		return visitor.VisitString(s.String)
	}
	if s.Json != nil {
		return visitor.VisitJson(s.Json)
	}
	if s.ChatHistory != nil {
		return visitor.VisitChatHistory(s.ChatHistory)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", s)
}

type SubworkflowEnum = string

// A Node Result Event emitted from a Subworkflow Node.
type SubworkflowNodeResult struct {
	_rawJSON json.RawMessage
}

func (s *SubworkflowNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler SubworkflowNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubworkflowNodeResult(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubworkflowNodeResult) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TemplatingNodeArrayResult struct {
	Id    string                    `json:"id" url:"id"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeArrayResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeChatHistoryResult struct {
	Id    string         `json:"id" url:"id"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeChatHistoryResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeErrorResult struct {
	Id    string       `json:"id" url:"id"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeErrorResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeFunctionCallResult struct {
	Id    string        `json:"id" url:"id"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeFunctionCallResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeJsonResult struct {
	Id    string                 `json:"id" url:"id"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeJsonResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeNumberResult struct {
	Id    string   `json:"id" url:"id"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeNumberResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Templating Node.
type TemplatingNodeResult struct {
	Data *TemplatingNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultData struct {
	Output *TemplatingNodeResultOutput `json:"output,omitempty" url:"output,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeResultData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeResultOutput struct {
	Type          string
	String        *TemplatingNodeStringResult
	Number        *TemplatingNodeNumberResult
	Json          *TemplatingNodeJsonResult
	ChatHistory   *TemplatingNodeChatHistoryResult
	SearchResults *TemplatingNodeSearchResultsResult
	Error         *TemplatingNodeErrorResult
	Array         *TemplatingNodeArrayResult
	FunctionCall  *TemplatingNodeFunctionCallResult
}

func (t *TemplatingNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TemplatingNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TemplatingNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TemplatingNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TemplatingNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TemplatingNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TemplatingNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	case "ARRAY":
		value := new(TemplatingNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	case "FUNCTION_CALL":
		value := new(TemplatingNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	}
	return nil
}

func (t TemplatingNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeStringResult
		}{
			Type:                       "STRING",
			TemplatingNodeStringResult: t.String,
		}
		return json.Marshal(marshaler)
	}
	if t.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeNumberResult
		}{
			Type:                       "NUMBER",
			TemplatingNodeNumberResult: t.Number,
		}
		return json.Marshal(marshaler)
	}
	if t.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeJsonResult
		}{
			Type:                     "JSON",
			TemplatingNodeJsonResult: t.Json,
		}
		return json.Marshal(marshaler)
	}
	if t.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeChatHistoryResult
		}{
			Type:                            "CHAT_HISTORY",
			TemplatingNodeChatHistoryResult: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if t.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeSearchResultsResult
		}{
			Type:                              "SEARCH_RESULTS",
			TemplatingNodeSearchResultsResult: t.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if t.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeErrorResult
		}{
			Type:                      "ERROR",
			TemplatingNodeErrorResult: t.Error,
		}
		return json.Marshal(marshaler)
	}
	if t.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeArrayResult
		}{
			Type:                      "ARRAY",
			TemplatingNodeArrayResult: t.Array,
		}
		return json.Marshal(marshaler)
	}
	if t.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeFunctionCallResult
		}{
			Type:                             "FUNCTION_CALL",
			TemplatingNodeFunctionCallResult: t.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TemplatingNodeResultOutputVisitor interface {
	VisitString(*TemplatingNodeStringResult) error
	VisitNumber(*TemplatingNodeNumberResult) error
	VisitJson(*TemplatingNodeJsonResult) error
	VisitChatHistory(*TemplatingNodeChatHistoryResult) error
	VisitSearchResults(*TemplatingNodeSearchResultsResult) error
	VisitError(*TemplatingNodeErrorResult) error
	VisitArray(*TemplatingNodeArrayResult) error
	VisitFunctionCall(*TemplatingNodeFunctionCallResult) error
}

func (t *TemplatingNodeResultOutput) Accept(visitor TemplatingNodeResultOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TemplatingNodeSearchResultsResult struct {
	Id    string          `json:"id" url:"id"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeSearchResultsResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TemplatingNodeStringResult struct {
	Id    string  `json:"id" url:"id"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TemplatingNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TemplatingNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TemplatingNodeStringResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TemplatingNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeArrayResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string                    `json:"name" url:"name"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeArrayResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeArrayResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeArrayResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeArrayResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeChatHistoryResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeChatHistoryResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeChatHistoryResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeChatHistoryResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeChatHistoryResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeErrorResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeErrorResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeErrorResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeErrorResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeErrorResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeFunctionCallResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeFunctionCallResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeFunctionCallResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeFunctionCallResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeFunctionCallResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeJsonResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeJsonResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeJsonResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeJsonResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeJsonResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeNumberResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeNumberResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeNumberResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeNumberResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeNumberResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A Node Result Event emitted from a Terminal Node.
type TerminalNodeResult struct {
	Data *TerminalNodeResultData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultData struct {
	Output *TerminalNodeResultOutput `json:"output,omitempty" url:"output,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeResultData) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeResultData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeResultData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeResultData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeResultOutput struct {
	Type          string
	String        *TerminalNodeStringResult
	Number        *TerminalNodeNumberResult
	Json          *TerminalNodeJsonResult
	ChatHistory   *TerminalNodeChatHistoryResult
	SearchResults *TerminalNodeSearchResultsResult
	Array         *TerminalNodeArrayResult
	FunctionCall  *TerminalNodeFunctionCallResult
	Error         *TerminalNodeErrorResult
}

func (t *TerminalNodeResultOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TerminalNodeStringResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TerminalNodeNumberResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TerminalNodeJsonResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TerminalNodeChatHistoryResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TerminalNodeSearchResultsResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ARRAY":
		value := new(TerminalNodeArrayResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Array = value
	case "FUNCTION_CALL":
		value := new(TerminalNodeFunctionCallResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.FunctionCall = value
	case "ERROR":
		value := new(TerminalNodeErrorResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TerminalNodeResultOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeStringResult
		}{
			Type:                     "STRING",
			TerminalNodeStringResult: t.String,
		}
		return json.Marshal(marshaler)
	}
	if t.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeNumberResult
		}{
			Type:                     "NUMBER",
			TerminalNodeNumberResult: t.Number,
		}
		return json.Marshal(marshaler)
	}
	if t.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeJsonResult
		}{
			Type:                   "JSON",
			TerminalNodeJsonResult: t.Json,
		}
		return json.Marshal(marshaler)
	}
	if t.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeChatHistoryResult
		}{
			Type:                          "CHAT_HISTORY",
			TerminalNodeChatHistoryResult: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if t.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeSearchResultsResult
		}{
			Type:                            "SEARCH_RESULTS",
			TerminalNodeSearchResultsResult: t.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if t.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeArrayResult
		}{
			Type:                    "ARRAY",
			TerminalNodeArrayResult: t.Array,
		}
		return json.Marshal(marshaler)
	}
	if t.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeFunctionCallResult
		}{
			Type:                           "FUNCTION_CALL",
			TerminalNodeFunctionCallResult: t.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if t.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeErrorResult
		}{
			Type:                    "ERROR",
			TerminalNodeErrorResult: t.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TerminalNodeResultOutputVisitor interface {
	VisitString(*TerminalNodeStringResult) error
	VisitNumber(*TerminalNodeNumberResult) error
	VisitJson(*TerminalNodeJsonResult) error
	VisitChatHistory(*TerminalNodeChatHistoryResult) error
	VisitSearchResults(*TerminalNodeSearchResultsResult) error
	VisitArray(*TerminalNodeArrayResult) error
	VisitFunctionCall(*TerminalNodeFunctionCallResult) error
	VisitError(*TerminalNodeErrorResult) error
}

func (t *TerminalNodeResultOutput) Accept(visitor TerminalNodeResultOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Array != nil {
		return visitor.VisitArray(t.Array)
	}
	if t.FunctionCall != nil {
		return visitor.VisitFunctionCall(t.FunctionCall)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TerminalNodeSearchResultsResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeSearchResultsResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeSearchResultsResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeSearchResultsResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeSearchResultsResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TerminalNodeStringResult struct {
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The unique name given to the terminal node that produced this output.
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TerminalNodeStringResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TerminalNodeStringResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TerminalNodeStringResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TerminalNodeStringResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseChatHistoryVariableValue struct {
	VariableId string         `json:"variable_id" url:"variable_id"`
	Value      []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseChatHistoryVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseChatHistoryVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseChatHistoryVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseChatHistoryVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseErrorVariableValue struct {
	VariableId string       `json:"variable_id" url:"variable_id"`
	Value      *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseErrorVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseErrorVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseErrorVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseErrorVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseJsonVariableValue struct {
	VariableId string                 `json:"variable_id" url:"variable_id"`
	Value      map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseJsonVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseJsonVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseJsonVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseJsonVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseNumberVariableValue struct {
	VariableId string   `json:"variable_id" url:"variable_id"`
	Value      *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseNumberVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseNumberVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseNumberVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseNumberVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseSearchResultsVariableValue struct {
	VariableId string          `json:"variable_id" url:"variable_id"`
	Value      []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseSearchResultsVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseSearchResultsVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseSearchResultsVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseSearchResultsVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseStringVariableValue struct {
	VariableId string  `json:"variable_id" url:"variable_id"`
	Value      *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestCaseStringVariableValue) UnmarshalJSON(data []byte) error {
	type unmarshaler TestCaseStringVariableValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestCaseStringVariableValue(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestCaseStringVariableValue) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestCaseVariableValue struct {
	Type          string
	String        *TestCaseStringVariableValue
	Number        *TestCaseNumberVariableValue
	Json          *TestCaseJsonVariableValue
	ChatHistory   *TestCaseChatHistoryVariableValue
	SearchResults *TestCaseSearchResultsVariableValue
	Error         *TestCaseErrorVariableValue
}

func (t *TestCaseVariableValue) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestCaseStringVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestCaseNumberVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestCaseJsonVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestCaseChatHistoryVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestCaseSearchResultsVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestCaseErrorVariableValue)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestCaseVariableValue) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseStringVariableValue
		}{
			Type:                        "STRING",
			TestCaseStringVariableValue: t.String,
		}
		return json.Marshal(marshaler)
	}
	if t.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseNumberVariableValue
		}{
			Type:                        "NUMBER",
			TestCaseNumberVariableValue: t.Number,
		}
		return json.Marshal(marshaler)
	}
	if t.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseJsonVariableValue
		}{
			Type:                      "JSON",
			TestCaseJsonVariableValue: t.Json,
		}
		return json.Marshal(marshaler)
	}
	if t.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseChatHistoryVariableValue
		}{
			Type:                             "CHAT_HISTORY",
			TestCaseChatHistoryVariableValue: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if t.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseSearchResultsVariableValue
		}{
			Type:                               "SEARCH_RESULTS",
			TestCaseSearchResultsVariableValue: t.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if t.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestCaseErrorVariableValue
		}{
			Type:                       "ERROR",
			TestCaseErrorVariableValue: t.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestCaseVariableValueVisitor interface {
	VisitString(*TestCaseStringVariableValue) error
	VisitNumber(*TestCaseNumberVariableValue) error
	VisitJson(*TestCaseJsonVariableValue) error
	VisitChatHistory(*TestCaseChatHistoryVariableValue) error
	VisitSearchResults(*TestCaseSearchResultsVariableValue) error
	VisitError(*TestCaseErrorVariableValue) error
}

func (t *TestCaseVariableValue) Accept(visitor TestCaseVariableValueVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfig struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigData `json:"data,omitempty" url:"data,omitempty"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfig(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigData struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigDataRequest struct {
	// The ID of the Prompt Deployment to run the Test Suite against.
	DeploymentId string `json:"deployment_id" url:"deployment_id"`
	// A tag identifying which release of the Prompt Deployment to run the Test Suite against. Useful for testing past versions of the Prompt Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Prompt Deployment
type TestSuiteRunDeploymentReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunDeploymentReleaseTagExecConfigDataRequest `json:"data,omitempty" url:"data,omitempty"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunDeploymentReleaseTagExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunDeploymentReleaseTagExecConfigRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunDeploymentReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunDeploymentReleaseTagExecConfigTypeEnum = string

type TestSuiteRunExecConfig struct {
	Type                 string
	DeploymentReleaseTag *TestSuiteRunDeploymentReleaseTagExecConfig
	WorkflowReleaseTag   *TestSuiteRunWorkflowReleaseTagExecConfig
}

func (t *TestSuiteRunExecConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "DEPLOYMENT_RELEASE_TAG":
		value := new(TestSuiteRunDeploymentReleaseTagExecConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.DeploymentReleaseTag = value
	case "WORKFLOW_RELEASE_TAG":
		value := new(TestSuiteRunWorkflowReleaseTagExecConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.WorkflowReleaseTag = value
	}
	return nil
}

func (t TestSuiteRunExecConfig) MarshalJSON() ([]byte, error) {
	if t.DeploymentReleaseTag != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunDeploymentReleaseTagExecConfig
		}{
			Type: "DEPLOYMENT_RELEASE_TAG",
			TestSuiteRunDeploymentReleaseTagExecConfig: t.DeploymentReleaseTag,
		}
		return json.Marshal(marshaler)
	}
	if t.WorkflowReleaseTag != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunWorkflowReleaseTagExecConfig
		}{
			Type:                                     "WORKFLOW_RELEASE_TAG",
			TestSuiteRunWorkflowReleaseTagExecConfig: t.WorkflowReleaseTag,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigVisitor interface {
	VisitDeploymentReleaseTag(*TestSuiteRunDeploymentReleaseTagExecConfig) error
	VisitWorkflowReleaseTag(*TestSuiteRunWorkflowReleaseTagExecConfig) error
}

func (t *TestSuiteRunExecConfig) Accept(visitor TestSuiteRunExecConfigVisitor) error {
	if t.DeploymentReleaseTag != nil {
		return visitor.VisitDeploymentReleaseTag(t.DeploymentReleaseTag)
	}
	if t.WorkflowReleaseTag != nil {
		return visitor.VisitWorkflowReleaseTag(t.WorkflowReleaseTag)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigRequest struct {
	Type                 string
	DeploymentReleaseTag *TestSuiteRunDeploymentReleaseTagExecConfigRequest
	WorkflowReleaseTag   *TestSuiteRunWorkflowReleaseTagExecConfigRequest
}

func (t *TestSuiteRunExecConfigRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "DEPLOYMENT_RELEASE_TAG":
		value := new(TestSuiteRunDeploymentReleaseTagExecConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.DeploymentReleaseTag = value
	case "WORKFLOW_RELEASE_TAG":
		value := new(TestSuiteRunWorkflowReleaseTagExecConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.WorkflowReleaseTag = value
	}
	return nil
}

func (t TestSuiteRunExecConfigRequest) MarshalJSON() ([]byte, error) {
	if t.DeploymentReleaseTag != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunDeploymentReleaseTagExecConfigRequest
		}{
			Type: "DEPLOYMENT_RELEASE_TAG",
			TestSuiteRunDeploymentReleaseTagExecConfigRequest: t.DeploymentReleaseTag,
		}
		return json.Marshal(marshaler)
	}
	if t.WorkflowReleaseTag != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunWorkflowReleaseTagExecConfigRequest
		}{
			Type: "WORKFLOW_RELEASE_TAG",
			TestSuiteRunWorkflowReleaseTagExecConfigRequest: t.WorkflowReleaseTag,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecConfigRequestVisitor interface {
	VisitDeploymentReleaseTag(*TestSuiteRunDeploymentReleaseTagExecConfigRequest) error
	VisitWorkflowReleaseTag(*TestSuiteRunWorkflowReleaseTagExecConfigRequest) error
}

func (t *TestSuiteRunExecConfigRequest) Accept(visitor TestSuiteRunExecConfigRequestVisitor) error {
	if t.DeploymentReleaseTag != nil {
		return visitor.VisitDeploymentReleaseTag(t.DeploymentReleaseTag)
	}
	if t.WorkflowReleaseTag != nil {
		return visitor.VisitWorkflowReleaseTag(t.WorkflowReleaseTag)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecution struct {
	Id            string                               `json:"id" url:"id"`
	TestCaseId    string                               `json:"test_case_id" url:"test_case_id"`
	Outputs       []*TestSuiteRunExecutionOutput       `json:"outputs,omitempty" url:"outputs,omitempty"`
	MetricResults []*TestSuiteRunExecutionMetricResult `json:"metric_results,omitempty" url:"metric_results,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecution) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecution
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecution(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecution) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionChatHistoryOutput struct {
	OutputVariableId string         `json:"output_variable_id" url:"output_variable_id"`
	Value            []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionChatHistoryOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionChatHistoryOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionChatHistoryOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionChatHistoryOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionErrorOutput struct {
	OutputVariableId string       `json:"output_variable_id" url:"output_variable_id"`
	Value            *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionErrorOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionErrorOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionErrorOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionJsonOutput struct {
	OutputVariableId string                 `json:"output_variable_id" url:"output_variable_id"`
	Value            map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionJsonOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionJsonOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionJsonOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionJsonOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionMetricResult struct {
	MetricId string                      `json:"metric_id" url:"metric_id"`
	Outputs  []*TestSuiteRunMetricOutput `json:"outputs,omitempty" url:"outputs,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionMetricResult) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionMetricResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionMetricResult(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionMetricResult) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionNumberOutput struct {
	OutputVariableId string   `json:"output_variable_id" url:"output_variable_id"`
	Value            *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionNumberOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionNumberOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionNumberOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionOutput struct {
	Type          string
	String        *TestSuiteRunExecutionStringOutput
	Number        *TestSuiteRunExecutionNumberOutput
	Json          *TestSuiteRunExecutionJsonOutput
	ChatHistory   *TestSuiteRunExecutionChatHistoryOutput
	SearchResults *TestSuiteRunExecutionSearchResultsOutput
	Error         *TestSuiteRunExecutionErrorOutput
}

func (t *TestSuiteRunExecutionOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(TestSuiteRunExecutionStringOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.String = value
	case "NUMBER":
		value := new(TestSuiteRunExecutionNumberOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "JSON":
		value := new(TestSuiteRunExecutionJsonOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Json = value
	case "CHAT_HISTORY":
		value := new(TestSuiteRunExecutionChatHistoryOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(TestSuiteRunExecutionSearchResultsOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.SearchResults = value
	case "ERROR":
		value := new(TestSuiteRunExecutionErrorOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestSuiteRunExecutionOutput) MarshalJSON() ([]byte, error) {
	if t.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionStringOutput
		}{
			Type:                              "STRING",
			TestSuiteRunExecutionStringOutput: t.String,
		}
		return json.Marshal(marshaler)
	}
	if t.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionNumberOutput
		}{
			Type:                              "NUMBER",
			TestSuiteRunExecutionNumberOutput: t.Number,
		}
		return json.Marshal(marshaler)
	}
	if t.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionJsonOutput
		}{
			Type:                            "JSON",
			TestSuiteRunExecutionJsonOutput: t.Json,
		}
		return json.Marshal(marshaler)
	}
	if t.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionChatHistoryOutput
		}{
			Type:                                   "CHAT_HISTORY",
			TestSuiteRunExecutionChatHistoryOutput: t.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if t.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionSearchResultsOutput
		}{
			Type:                                     "SEARCH_RESULTS",
			TestSuiteRunExecutionSearchResultsOutput: t.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if t.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunExecutionErrorOutput
		}{
			Type:                             "ERROR",
			TestSuiteRunExecutionErrorOutput: t.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecutionOutputVisitor interface {
	VisitString(*TestSuiteRunExecutionStringOutput) error
	VisitNumber(*TestSuiteRunExecutionNumberOutput) error
	VisitJson(*TestSuiteRunExecutionJsonOutput) error
	VisitChatHistory(*TestSuiteRunExecutionChatHistoryOutput) error
	VisitSearchResults(*TestSuiteRunExecutionSearchResultsOutput) error
	VisitError(*TestSuiteRunExecutionErrorOutput) error
}

func (t *TestSuiteRunExecutionOutput) Accept(visitor TestSuiteRunExecutionOutputVisitor) error {
	if t.String != nil {
		return visitor.VisitString(t.String)
	}
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Json != nil {
		return visitor.VisitJson(t.Json)
	}
	if t.ChatHistory != nil {
		return visitor.VisitChatHistory(t.ChatHistory)
	}
	if t.SearchResults != nil {
		return visitor.VisitSearchResults(t.SearchResults)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunExecutionSearchResultsOutput struct {
	OutputVariableId string          `json:"output_variable_id" url:"output_variable_id"`
	Value            []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionSearchResultsOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionSearchResultsOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionSearchResultsOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionSearchResultsOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunExecutionStringOutput struct {
	OutputVariableId string  `json:"output_variable_id" url:"output_variable_id"`
	Value            *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunExecutionStringOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunExecutionStringOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunExecutionStringOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunExecutionStringOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Output for a test suite run metric that is of type ERROR
type TestSuiteRunMetricErrorOutput struct {
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`
	Name  string       `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunMetricErrorOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunMetricErrorOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunMetricErrorOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricErrorOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunMetricErrorOutputTypeEnum = string

// Output for a test suite run metric that is of type NUMBER
type TestSuiteRunMetricNumberOutput struct {
	Value float64 `json:"value" url:"value"`
	Name  string  `json:"name" url:"name"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunMetricNumberOutput) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunMetricNumberOutput
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunMetricNumberOutput(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunMetricNumberOutput) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunMetricNumberOutputTypeEnum = string

type TestSuiteRunMetricOutput struct {
	Type   string
	Number *TestSuiteRunMetricNumberOutput
	Error  *TestSuiteRunMetricErrorOutput
}

func (t *TestSuiteRunMetricOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	t.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "NUMBER":
		value := new(TestSuiteRunMetricNumberOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Number = value
	case "ERROR":
		value := new(TestSuiteRunMetricErrorOutput)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		t.Error = value
	}
	return nil
}

func (t TestSuiteRunMetricOutput) MarshalJSON() ([]byte, error) {
	if t.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunMetricNumberOutput
		}{
			Type:                           "NUMBER",
			TestSuiteRunMetricNumberOutput: t.Number,
		}
		return json.Marshal(marshaler)
	}
	if t.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TestSuiteRunMetricErrorOutput
		}{
			Type:                          "ERROR",
			TestSuiteRunMetricErrorOutput: t.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunMetricOutputVisitor interface {
	VisitNumber(*TestSuiteRunMetricNumberOutput) error
	VisitError(*TestSuiteRunMetricErrorOutput) error
}

func (t *TestSuiteRunMetricOutput) Accept(visitor TestSuiteRunMetricOutputVisitor) error {
	if t.Number != nil {
		return visitor.VisitNumber(t.Number)
	}
	if t.Error != nil {
		return visitor.VisitError(t.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", t)
}

type TestSuiteRunRead struct {
	Id        string                 `json:"id" url:"id"`
	Created   time.Time              `json:"created" url:"created"`
	TestSuite *TestSuiteRunTestSuite `json:"test_suite,omitempty" url:"test_suite,omitempty"`
	// The current state of this run
	//
	// - `QUEUED` - Queued
	// - `RUNNING` - Running
	// - `COMPLETE` - Complete
	// - `FAILED` - Failed
	// - `CANCELLED` - Cancelled
	State TestSuiteRunState `json:"state,omitempty" url:"state,omitempty"`
	// Configuration that defines how the Test Suite should be run
	ExecConfig *TestSuiteRunExecConfig `json:"exec_config,omitempty" url:"exec_config,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunRead) UnmarshalJSON(data []byte) error {
	type embed TestSuiteRunRead
	var unmarshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed: embed(*t),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*t = TestSuiteRunRead(unmarshaler.embed)
	t.Created = unmarshaler.Created.Time()
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunRead) MarshalJSON() ([]byte, error) {
	type embed TestSuiteRunRead
	var marshaler = struct {
		embed
		Created *core.DateTime `json:"created"`
	}{
		embed:   embed(*t),
		Created: core.NewDateTime(t.Created),
	}
	return json.Marshal(marshaler)
}

func (t *TestSuiteRunRead) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `QUEUED` - Queued
// - `RUNNING` - Running
// - `COMPLETE` - Complete
// - `FAILED` - Failed
// - `CANCELLED` - Cancelled
type TestSuiteRunState string

const (
	TestSuiteRunStateQueued    TestSuiteRunState = "QUEUED"
	TestSuiteRunStateRunning   TestSuiteRunState = "RUNNING"
	TestSuiteRunStateComplete  TestSuiteRunState = "COMPLETE"
	TestSuiteRunStateFailed    TestSuiteRunState = "FAILED"
	TestSuiteRunStateCancelled TestSuiteRunState = "CANCELLED"
)

func NewTestSuiteRunStateFromString(s string) (TestSuiteRunState, error) {
	switch s {
	case "QUEUED":
		return TestSuiteRunStateQueued, nil
	case "RUNNING":
		return TestSuiteRunStateRunning, nil
	case "COMPLETE":
		return TestSuiteRunStateComplete, nil
	case "FAILED":
		return TestSuiteRunStateFailed, nil
	case "CANCELLED":
		return TestSuiteRunStateCancelled, nil
	}
	var t TestSuiteRunState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TestSuiteRunState) Ptr() *TestSuiteRunState {
	return &t
}

type TestSuiteRunTestSuite struct {
	Id            string `json:"id" url:"id"`
	HistoryItemId string `json:"history_item_id" url:"history_item_id"`
	Label         string `json:"label" url:"label"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunTestSuite) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunTestSuite
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunTestSuite(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunTestSuite) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfig struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigData `json:"data,omitempty" url:"data,omitempty"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfig(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigData struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigData(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigDataRequest struct {
	// The ID of the Workflow Deployment to run the Test Suite against.
	WorkflowDeploymentId string `json:"workflow_deployment_id" url:"workflow_deployment_id"`
	// A tag identifying which release of the Workflow Deployment to run the Test Suite against. Useful for testing past versions of the Workflow Deployment
	Tag *string `json:"tag,omitempty" url:"tag,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigDataRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigDataRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Execution configuration for running a Test Suite against a Workflow Deployment
type TestSuiteRunWorkflowReleaseTagExecConfigRequest struct {
	Data *TestSuiteRunWorkflowReleaseTagExecConfigDataRequest `json:"data,omitempty" url:"data,omitempty"`
	// Optionally specify a subset of test case ids to run. If not provided, all test cases within the test suite will be run by default.
	TestCaseIds []string `json:"test_case_ids,omitempty" url:"test_case_ids,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteRunWorkflowReleaseTagExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteRunWorkflowReleaseTagExecConfigRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteRunWorkflowReleaseTagExecConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TestSuiteRunWorkflowReleaseTagExecConfigTypeEnum = string

type TestSuiteTestCase struct {
	Id               *string                  `json:"id,omitempty" url:"id,omitempty"`
	Label            *string                  `json:"label,omitempty" url:"label,omitempty"`
	InputValues      []*TestCaseVariableValue `json:"input_values,omitempty" url:"input_values,omitempty"`
	EvaluationValues []*TestCaseVariableValue `json:"evaluation_values,omitempty" url:"evaluation_values,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TestSuiteTestCase) UnmarshalJSON(data []byte) error {
	type unmarshaler TestSuiteTestCase
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TestSuiteTestCase(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TestSuiteTestCase) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UploadDocumentErrorResponse struct {
	Detail string `json:"detail" url:"detail"`

	_rawJSON json.RawMessage
}

func (u *UploadDocumentErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentErrorResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentErrorResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UploadDocumentResponse struct {
	// The ID of the newly created document.
	DocumentId string `json:"document_id" url:"document_id"`

	_rawJSON json.RawMessage
}

func (u *UploadDocumentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadDocumentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadDocumentResponse(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadDocumentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type VellumError struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code,omitempty" url:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumError) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumError(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumError) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `INVALID_REQUEST` - INVALID_REQUEST
// - `PROVIDER_ERROR` - PROVIDER_ERROR
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type VellumErrorCodeEnum string

const (
	VellumErrorCodeEnumInvalidRequest      VellumErrorCodeEnum = "INVALID_REQUEST"
	VellumErrorCodeEnumProviderError       VellumErrorCodeEnum = "PROVIDER_ERROR"
	VellumErrorCodeEnumInternalServerError VellumErrorCodeEnum = "INTERNAL_SERVER_ERROR"
	VellumErrorCodeEnumUserDefinedError    VellumErrorCodeEnum = "USER_DEFINED_ERROR"
)

func NewVellumErrorCodeEnumFromString(s string) (VellumErrorCodeEnum, error) {
	switch s {
	case "INVALID_REQUEST":
		return VellumErrorCodeEnumInvalidRequest, nil
	case "PROVIDER_ERROR":
		return VellumErrorCodeEnumProviderError, nil
	case "INTERNAL_SERVER_ERROR":
		return VellumErrorCodeEnumInternalServerError, nil
	case "USER_DEFINED_ERROR":
		return VellumErrorCodeEnumUserDefinedError, nil
	}
	var t VellumErrorCodeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumErrorCodeEnum) Ptr() *VellumErrorCodeEnum {
	return &v
}

type VellumErrorRequest struct {
	Message string              `json:"message" url:"message"`
	Code    VellumErrorCodeEnum `json:"code,omitempty" url:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumErrorRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumErrorRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumErrorRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumErrorRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImage struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumImage) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImage(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImage) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumImageRequest struct {
	Src      string                 `json:"src" url:"src"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumImageRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumImageRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumImageRequest(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumImageRequest) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VellumVariable struct {
	Id   string             `json:"id" url:"id"`
	Key  string             `json:"key" url:"key"`
	Type VellumVariableType `json:"type,omitempty" url:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (v *VellumVariable) UnmarshalJSON(data []byte) error {
	type unmarshaler VellumVariable
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VellumVariable(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *VellumVariable) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// - `STRING` - STRING
// - `NUMBER` - NUMBER
// - `JSON` - JSON
// - `CHAT_HISTORY` - CHAT_HISTORY
// - `SEARCH_RESULTS` - SEARCH_RESULTS
// - `ERROR` - ERROR
// - `ARRAY` - ARRAY
// - `FUNCTION_CALL` - FUNCTION_CALL
// - `IMAGE` - IMAGE
type VellumVariableType string

const (
	VellumVariableTypeString        VellumVariableType = "STRING"
	VellumVariableTypeNumber        VellumVariableType = "NUMBER"
	VellumVariableTypeJson          VellumVariableType = "JSON"
	VellumVariableTypeChatHistory   VellumVariableType = "CHAT_HISTORY"
	VellumVariableTypeSearchResults VellumVariableType = "SEARCH_RESULTS"
	VellumVariableTypeError         VellumVariableType = "ERROR"
	VellumVariableTypeArray         VellumVariableType = "ARRAY"
	VellumVariableTypeFunctionCall  VellumVariableType = "FUNCTION_CALL"
	VellumVariableTypeImage         VellumVariableType = "IMAGE"
)

func NewVellumVariableTypeFromString(s string) (VellumVariableType, error) {
	switch s {
	case "STRING":
		return VellumVariableTypeString, nil
	case "NUMBER":
		return VellumVariableTypeNumber, nil
	case "JSON":
		return VellumVariableTypeJson, nil
	case "CHAT_HISTORY":
		return VellumVariableTypeChatHistory, nil
	case "SEARCH_RESULTS":
		return VellumVariableTypeSearchResults, nil
	case "ERROR":
		return VellumVariableTypeError, nil
	case "ARRAY":
		return VellumVariableTypeArray, nil
	case "FUNCTION_CALL":
		return VellumVariableTypeFunctionCall, nil
	case "IMAGE":
		return VellumVariableTypeImage, nil
	}
	var t VellumVariableType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VellumVariableType) Ptr() *VellumVariableType {
	return &v
}

type WorkflowDeploymentRead struct {
	Id string `json:"id" url:"id"`
	// A name that uniquely identifies this workflow deployment within its workspace
	Name string `json:"name" url:"name"`
	// A human-readable label for the workflow deployment
	Label string `json:"label" url:"label"`
	// The current status of the workflow deployment
	//
	// - `ACTIVE` - Active
	// - `ARCHIVED` - Archived
	Status *EntityStatus `json:"status,omitempty" url:"status,omitempty"`
	// The environment this workflow deployment is used in
	//
	// - `DEVELOPMENT` - Development
	// - `STAGING` - Staging
	// - `PRODUCTION` - Production
	Environment    *EnvironmentEnum `json:"environment,omitempty" url:"environment,omitempty"`
	Created        time.Time        `json:"created" url:"created"`
	LastDeployedOn time.Time        `json:"last_deployed_on" url:"last_deployed_on"`
	// The input variables this Workflow Deployment expects to receive values for when it is executed.
	InputVariables []*VellumVariable `json:"input_variables,omitempty" url:"input_variables,omitempty"`
	// The output variables this Workflow Deployment produces values for when it's executed.
	OutputVariables []*VellumVariable `json:"output_variables,omitempty" url:"output_variables,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowDeploymentRead) UnmarshalJSON(data []byte) error {
	type embed WorkflowDeploymentRead
	var unmarshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowDeploymentRead(unmarshaler.embed)
	w.Created = unmarshaler.Created.Time()
	w.LastDeployedOn = unmarshaler.LastDeployedOn.Time()
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowDeploymentRead) MarshalJSON() ([]byte, error) {
	type embed WorkflowDeploymentRead
	var marshaler = struct {
		embed
		Created        *core.DateTime `json:"created"`
		LastDeployedOn *core.DateTime `json:"last_deployed_on"`
	}{
		embed:          embed(*w),
		Created:        core.NewDateTime(w.Created),
		LastDeployedOn: core.NewDateTime(w.LastDeployedOn),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowDeploymentRead) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowEventError struct {
	Message string                          `json:"message" url:"message"`
	Code    WorkflowExecutionEventErrorCode `json:"code,omitempty" url:"code,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowEventError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowEventError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowEventError(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowEventError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualChatHistoryRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue []*ChatMessageRequest `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualChatHistoryRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualChatHistoryRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualChatHistoryRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualChatHistoryRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualJsonRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue map[string]interface{} `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualJsonRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualJsonRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualJsonRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualJsonRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowExecutionActualStringRequest struct {
	// The Vellum-generated ID of a workflow output. Must provide either this or output_key. output_key is typically preferred.
	OutputId *string `json:"output_id,omitempty" url:"output_id,omitempty"`
	// The user-defined name of a workflow output. Must provide either this or output_id. Should correspond to the `Name` specified in a Final Output Node. Generally preferred over output_id.
	OutputKey *string `json:"output_key,omitempty" url:"output_key,omitempty"`
	// Optionally provide a decimal number between 0.0 and 1.0 (inclusive) representing the quality of the output. 0 is the worst, 1 is the best.
	Quality *float64 `json:"quality,omitempty" url:"quality,omitempty"`
	// Optionally provide the timestamp representing when this feedback was collected. Used for reporting purposes.
	Timestamp *float64 `json:"timestamp,omitempty" url:"timestamp,omitempty"`
	// Optionally provide the value that the output ideally should have been.
	DesiredOutputValue *string `json:"desired_output_value,omitempty" url:"desired_output_value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionActualStringRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionActualStringRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionActualStringRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionActualStringRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// - `WORKFLOW_INITIALIZATION` - WORKFLOW_INITIALIZATION
// - `WORKFLOW_CANCELLED` - WORKFLOW_CANCELLED
// - `NODE_EXECUTION_COUNT_LIMIT_REACHED` - NODE_EXECUTION_COUNT_LIMIT_REACHED
// - `INTERNAL_SERVER_ERROR` - INTERNAL_SERVER_ERROR
// - `NODE_EXECUTION` - NODE_EXECUTION
// - `LLM_PROVIDER` - LLM_PROVIDER
// - `INVALID_TEMPLATE` - INVALID_TEMPLATE
// - `USER_DEFINED_ERROR` - USER_DEFINED_ERROR
type WorkflowExecutionEventErrorCode string

const (
	WorkflowExecutionEventErrorCodeWorkflowInitialization         WorkflowExecutionEventErrorCode = "WORKFLOW_INITIALIZATION"
	WorkflowExecutionEventErrorCodeWorkflowCancelled              WorkflowExecutionEventErrorCode = "WORKFLOW_CANCELLED"
	WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached WorkflowExecutionEventErrorCode = "NODE_EXECUTION_COUNT_LIMIT_REACHED"
	WorkflowExecutionEventErrorCodeInternalServerError            WorkflowExecutionEventErrorCode = "INTERNAL_SERVER_ERROR"
	WorkflowExecutionEventErrorCodeNodeExecution                  WorkflowExecutionEventErrorCode = "NODE_EXECUTION"
	WorkflowExecutionEventErrorCodeLlmProvider                    WorkflowExecutionEventErrorCode = "LLM_PROVIDER"
	WorkflowExecutionEventErrorCodeInvalidTemplate                WorkflowExecutionEventErrorCode = "INVALID_TEMPLATE"
	WorkflowExecutionEventErrorCodeUserDefinedError               WorkflowExecutionEventErrorCode = "USER_DEFINED_ERROR"
)

func NewWorkflowExecutionEventErrorCodeFromString(s string) (WorkflowExecutionEventErrorCode, error) {
	switch s {
	case "WORKFLOW_INITIALIZATION":
		return WorkflowExecutionEventErrorCodeWorkflowInitialization, nil
	case "WORKFLOW_CANCELLED":
		return WorkflowExecutionEventErrorCodeWorkflowCancelled, nil
	case "NODE_EXECUTION_COUNT_LIMIT_REACHED":
		return WorkflowExecutionEventErrorCodeNodeExecutionCountLimitReached, nil
	case "INTERNAL_SERVER_ERROR":
		return WorkflowExecutionEventErrorCodeInternalServerError, nil
	case "NODE_EXECUTION":
		return WorkflowExecutionEventErrorCodeNodeExecution, nil
	case "LLM_PROVIDER":
		return WorkflowExecutionEventErrorCodeLlmProvider, nil
	case "INVALID_TEMPLATE":
		return WorkflowExecutionEventErrorCodeInvalidTemplate, nil
	case "USER_DEFINED_ERROR":
		return WorkflowExecutionEventErrorCodeUserDefinedError, nil
	}
	var t WorkflowExecutionEventErrorCode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventErrorCode) Ptr() *WorkflowExecutionEventErrorCode {
	return &w
}

// - `NODE` - NODE
// - `WORKFLOW` - WORKFLOW
type WorkflowExecutionEventType string

const (
	WorkflowExecutionEventTypeNode     WorkflowExecutionEventType = "NODE"
	WorkflowExecutionEventTypeWorkflow WorkflowExecutionEventType = "WORKFLOW"
)

func NewWorkflowExecutionEventTypeFromString(s string) (WorkflowExecutionEventType, error) {
	switch s {
	case "NODE":
		return WorkflowExecutionEventTypeNode, nil
	case "WORKFLOW":
		return WorkflowExecutionEventTypeWorkflow, nil
	}
	var t WorkflowExecutionEventType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowExecutionEventType) Ptr() *WorkflowExecutionEventType {
	return &w
}

// A NODE-level event emitted from the workflow's execution.
type WorkflowExecutionNodeResultEvent struct {
	ExecutionId string                   `json:"execution_id" url:"execution_id"`
	RunId       *string                  `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string                  `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowNodeResultEvent `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionNodeResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionNodeResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionNodeResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionNodeResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A WORKFLOW-level event emitted from the workflow's execution.
type WorkflowExecutionWorkflowResultEvent struct {
	ExecutionId string               `json:"execution_id" url:"execution_id"`
	RunId       *string              `json:"run_id,omitempty" url:"run_id,omitempty"`
	ExternalId  *string              `json:"external_id,omitempty" url:"external_id,omitempty"`
	Data        *WorkflowResultEvent `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowExecutionWorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowExecutionWorkflowResultEvent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowExecutionWorkflowResultEvent(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowExecutionWorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowNodeResultData struct {
	Type          string
	Prompt        *PromptNodeResult
	Search        *SearchNodeResult
	Templating    *TemplatingNodeResult
	CodeExecution *CodeExecutionNodeResult
	Conditional   *ConditionalNodeResult
	Api           *ApiNodeResult
	Terminal      *TerminalNodeResult
	Subworkflow   *SubworkflowNodeResult
}

func (w *WorkflowNodeResultData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "PROMPT":
		value := new(PromptNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Prompt = value
	case "SEARCH":
		value := new(SearchNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Search = value
	case "TEMPLATING":
		value := new(TemplatingNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Templating = value
	case "CODE_EXECUTION":
		value := new(CodeExecutionNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.CodeExecution = value
	case "CONDITIONAL":
		value := new(ConditionalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Conditional = value
	case "API":
		value := new(ApiNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Api = value
	case "TERMINAL":
		value := new(TerminalNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Terminal = value
	case "SUBWORKFLOW":
		value := new(SubworkflowNodeResult)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Subworkflow = value
	}
	return nil
}

func (w WorkflowNodeResultData) MarshalJSON() ([]byte, error) {
	if w.Prompt != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*PromptNodeResult
		}{
			Type:             "PROMPT",
			PromptNodeResult: w.Prompt,
		}
		return json.Marshal(marshaler)
	}
	if w.Search != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*SearchNodeResult
		}{
			Type:             "SEARCH",
			SearchNodeResult: w.Search,
		}
		return json.Marshal(marshaler)
	}
	if w.Templating != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TemplatingNodeResult
		}{
			Type:                 "TEMPLATING",
			TemplatingNodeResult: w.Templating,
		}
		return json.Marshal(marshaler)
	}
	if w.CodeExecution != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*CodeExecutionNodeResult
		}{
			Type:                    "CODE_EXECUTION",
			CodeExecutionNodeResult: w.CodeExecution,
		}
		return json.Marshal(marshaler)
	}
	if w.Conditional != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ConditionalNodeResult
		}{
			Type:                  "CONDITIONAL",
			ConditionalNodeResult: w.Conditional,
		}
		return json.Marshal(marshaler)
	}
	if w.Api != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*ApiNodeResult
		}{
			Type:          "API",
			ApiNodeResult: w.Api,
		}
		return json.Marshal(marshaler)
	}
	if w.Terminal != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*TerminalNodeResult
		}{
			Type:               "TERMINAL",
			TerminalNodeResult: w.Terminal,
		}
		return json.Marshal(marshaler)
	}
	if w.Subworkflow != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*SubworkflowNodeResult
		}{
			Type:                  "SUBWORKFLOW",
			SubworkflowNodeResult: w.Subworkflow,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultDataVisitor interface {
	VisitPrompt(*PromptNodeResult) error
	VisitSearch(*SearchNodeResult) error
	VisitTemplating(*TemplatingNodeResult) error
	VisitCodeExecution(*CodeExecutionNodeResult) error
	VisitConditional(*ConditionalNodeResult) error
	VisitApi(*ApiNodeResult) error
	VisitTerminal(*TerminalNodeResult) error
	VisitSubworkflow(*SubworkflowNodeResult) error
}

func (w *WorkflowNodeResultData) Accept(visitor WorkflowNodeResultDataVisitor) error {
	if w.Prompt != nil {
		return visitor.VisitPrompt(w.Prompt)
	}
	if w.Search != nil {
		return visitor.VisitSearch(w.Search)
	}
	if w.Templating != nil {
		return visitor.VisitTemplating(w.Templating)
	}
	if w.CodeExecution != nil {
		return visitor.VisitCodeExecution(w.CodeExecution)
	}
	if w.Conditional != nil {
		return visitor.VisitConditional(w.Conditional)
	}
	if w.Api != nil {
		return visitor.VisitApi(w.Api)
	}
	if w.Terminal != nil {
		return visitor.VisitTerminal(w.Terminal)
	}
	if w.Subworkflow != nil {
		return visitor.VisitSubworkflow(w.Subworkflow)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultEvent struct {
	State     string
	Initiated *InitiatedWorkflowNodeResultEvent
	Streaming *StreamingWorkflowNodeResultEvent
	Fulfilled *FulfilledWorkflowNodeResultEvent
	Rejected  *RejectedWorkflowNodeResultEvent
}

func (w *WorkflowNodeResultEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		State string `json:"state"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.State = unmarshaler.State
	switch unmarshaler.State {
	case "INITIATED":
		value := new(InitiatedWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Initiated = value
	case "STREAMING":
		value := new(StreamingWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Streaming = value
	case "FULFILLED":
		value := new(FulfilledWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Fulfilled = value
	case "REJECTED":
		value := new(RejectedWorkflowNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Rejected = value
	}
	return nil
}

func (w WorkflowNodeResultEvent) MarshalJSON() ([]byte, error) {
	if w.Initiated != nil {
		var marshaler = struct {
			State string `json:"state"`
			*InitiatedWorkflowNodeResultEvent
		}{
			State:                            "INITIATED",
			InitiatedWorkflowNodeResultEvent: w.Initiated,
		}
		return json.Marshal(marshaler)
	}
	if w.Streaming != nil {
		var marshaler = struct {
			State string `json:"state"`
			*StreamingWorkflowNodeResultEvent
		}{
			State:                            "STREAMING",
			StreamingWorkflowNodeResultEvent: w.Streaming,
		}
		return json.Marshal(marshaler)
	}
	if w.Fulfilled != nil {
		var marshaler = struct {
			State string `json:"state"`
			*FulfilledWorkflowNodeResultEvent
		}{
			State:                            "FULFILLED",
			FulfilledWorkflowNodeResultEvent: w.Fulfilled,
		}
		return json.Marshal(marshaler)
	}
	if w.Rejected != nil {
		var marshaler = struct {
			State string `json:"state"`
			*RejectedWorkflowNodeResultEvent
		}{
			State:                           "REJECTED",
			RejectedWorkflowNodeResultEvent: w.Rejected,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowNodeResultEventVisitor interface {
	VisitInitiated(*InitiatedWorkflowNodeResultEvent) error
	VisitStreaming(*StreamingWorkflowNodeResultEvent) error
	VisitFulfilled(*FulfilledWorkflowNodeResultEvent) error
	VisitRejected(*RejectedWorkflowNodeResultEvent) error
}

func (w *WorkflowNodeResultEvent) Accept(visitor WorkflowNodeResultEventVisitor) error {
	if w.Initiated != nil {
		return visitor.VisitInitiated(w.Initiated)
	}
	if w.Streaming != nil {
		return visitor.VisitStreaming(w.Streaming)
	}
	if w.Fulfilled != nil {
		return visitor.VisitFulfilled(w.Fulfilled)
	}
	if w.Rejected != nil {
		return visitor.VisitRejected(w.Rejected)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// - `INITIATED` - INITIATED
// - `STREAMING` - STREAMING
// - `FULFILLED` - FULFILLED
// - `REJECTED` - REJECTED
type WorkflowNodeResultEventState string

const (
	WorkflowNodeResultEventStateInitiated WorkflowNodeResultEventState = "INITIATED"
	WorkflowNodeResultEventStateStreaming WorkflowNodeResultEventState = "STREAMING"
	WorkflowNodeResultEventStateFulfilled WorkflowNodeResultEventState = "FULFILLED"
	WorkflowNodeResultEventStateRejected  WorkflowNodeResultEventState = "REJECTED"
)

func NewWorkflowNodeResultEventStateFromString(s string) (WorkflowNodeResultEventState, error) {
	switch s {
	case "INITIATED":
		return WorkflowNodeResultEventStateInitiated, nil
	case "STREAMING":
		return WorkflowNodeResultEventStateStreaming, nil
	case "FULFILLED":
		return WorkflowNodeResultEventStateFulfilled, nil
	case "REJECTED":
		return WorkflowNodeResultEventStateRejected, nil
	}
	var t WorkflowNodeResultEventState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WorkflowNodeResultEventState) Ptr() *WorkflowNodeResultEventState {
	return &w
}

type WorkflowOutput struct {
	Type          string
	String        *WorkflowOutputString
	Number        *WorkflowOutputNumber
	Json          *WorkflowOutputJson
	ChatHistory   *WorkflowOutputChatHistory
	SearchResults *WorkflowOutputSearchResults
	Array         *WorkflowOutputArray
	Error         *WorkflowOutputError
	FunctionCall  *WorkflowOutputFunctionCall
	Image         *WorkflowOutputImage
}

func (w *WorkflowOutput) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowOutputString)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "NUMBER":
		value := new(WorkflowOutputNumber)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	case "JSON":
		value := new(WorkflowOutputJson)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowOutputChatHistory)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(WorkflowOutputSearchResults)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.SearchResults = value
	case "ARRAY":
		value := new(WorkflowOutputArray)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Array = value
	case "ERROR":
		value := new(WorkflowOutputError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Error = value
	case "FUNCTION_CALL":
		value := new(WorkflowOutputFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.FunctionCall = value
	case "IMAGE":
		value := new(WorkflowOutputImage)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Image = value
	}
	return nil
}

func (w WorkflowOutput) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputString
		}{
			Type:                 "STRING",
			WorkflowOutputString: w.String,
		}
		return json.Marshal(marshaler)
	}
	if w.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputNumber
		}{
			Type:                 "NUMBER",
			WorkflowOutputNumber: w.Number,
		}
		return json.Marshal(marshaler)
	}
	if w.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputJson
		}{
			Type:               "JSON",
			WorkflowOutputJson: w.Json,
		}
		return json.Marshal(marshaler)
	}
	if w.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputChatHistory
		}{
			Type:                      "CHAT_HISTORY",
			WorkflowOutputChatHistory: w.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if w.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputSearchResults
		}{
			Type:                        "SEARCH_RESULTS",
			WorkflowOutputSearchResults: w.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if w.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputArray
		}{
			Type:                "ARRAY",
			WorkflowOutputArray: w.Array,
		}
		return json.Marshal(marshaler)
	}
	if w.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputError
		}{
			Type:                "ERROR",
			WorkflowOutputError: w.Error,
		}
		return json.Marshal(marshaler)
	}
	if w.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputFunctionCall
		}{
			Type:                       "FUNCTION_CALL",
			WorkflowOutputFunctionCall: w.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if w.Image != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowOutputImage
		}{
			Type:                "IMAGE",
			WorkflowOutputImage: w.Image,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowOutputVisitor interface {
	VisitString(*WorkflowOutputString) error
	VisitNumber(*WorkflowOutputNumber) error
	VisitJson(*WorkflowOutputJson) error
	VisitChatHistory(*WorkflowOutputChatHistory) error
	VisitSearchResults(*WorkflowOutputSearchResults) error
	VisitArray(*WorkflowOutputArray) error
	VisitError(*WorkflowOutputError) error
	VisitFunctionCall(*WorkflowOutputFunctionCall) error
	VisitImage(*WorkflowOutputImage) error
}

func (w *WorkflowOutput) Accept(visitor WorkflowOutputVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.SearchResults != nil {
		return visitor.VisitSearchResults(w.SearchResults)
	}
	if w.Array != nil {
		return visitor.VisitArray(w.Array)
	}
	if w.Error != nil {
		return visitor.VisitError(w.Error)
	}
	if w.FunctionCall != nil {
		return visitor.VisitFunctionCall(w.FunctionCall)
	}
	if w.Image != nil {
		return visitor.VisitImage(w.Image)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// An array output from a Workflow execution.
type WorkflowOutputArray struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string                    `json:"name" url:"name"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputArray) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputArray
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputArray(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A chat history output from a Workflow execution.
type WorkflowOutputChatHistory struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string         `json:"name" url:"name"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputChatHistory) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputChatHistory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputChatHistory(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An error output from a Workflow execution.
type WorkflowOutputError struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputError(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A function call output from a Workflow execution.
type WorkflowOutputFunctionCall struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string        `json:"name" url:"name"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputFunctionCall(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An image output from a Workflow execution.
type WorkflowOutputImage struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string       `json:"name" url:"name"`
	Value *VellumImage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputImage) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputImage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputImage(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputImage) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output from a Workflow execution.
type WorkflowOutputJson struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputJson) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputJson(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output from a Workflow execution.
type WorkflowOutputNumber struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string   `json:"name" url:"name"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputNumber(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A search results output from a Workflow execution.
type WorkflowOutputSearchResults struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string          `json:"name" url:"name"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputSearchResults(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output from a Workflow execution.
type WorkflowOutputString struct {
	Id string `json:"id" url:"id"`
	// The output's name, as defined in the workflow
	Name  string  `json:"name" url:"name"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowOutputString) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowOutputString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowOutputString(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowOutputString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a chat history variable in a Workflow.
type WorkflowRequestChatHistoryInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                `json:"name" url:"name"`
	Value []*ChatMessageRequest `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestChatHistoryInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestChatHistoryInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestChatHistoryInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestChatHistoryInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowRequestInputRequest struct {
	Type        string
	String      *WorkflowRequestStringInputRequest
	Json        *WorkflowRequestJsonInputRequest
	ChatHistory *WorkflowRequestChatHistoryInputRequest
	Number      *WorkflowRequestNumberInputRequest
}

func (w *WorkflowRequestInputRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowRequestStringInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "JSON":
		value := new(WorkflowRequestJsonInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowRequestChatHistoryInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "NUMBER":
		value := new(WorkflowRequestNumberInputRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	}
	return nil
}

func (w WorkflowRequestInputRequest) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestStringInputRequest
		}{
			Type:                              "STRING",
			WorkflowRequestStringInputRequest: w.String,
		}
		return json.Marshal(marshaler)
	}
	if w.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestJsonInputRequest
		}{
			Type:                            "JSON",
			WorkflowRequestJsonInputRequest: w.Json,
		}
		return json.Marshal(marshaler)
	}
	if w.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestChatHistoryInputRequest
		}{
			Type:                                   "CHAT_HISTORY",
			WorkflowRequestChatHistoryInputRequest: w.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if w.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowRequestNumberInputRequest
		}{
			Type:                              "NUMBER",
			WorkflowRequestNumberInputRequest: w.Number,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowRequestInputRequestVisitor interface {
	VisitString(*WorkflowRequestStringInputRequest) error
	VisitJson(*WorkflowRequestJsonInputRequest) error
	VisitChatHistory(*WorkflowRequestChatHistoryInputRequest) error
	VisitNumber(*WorkflowRequestNumberInputRequest) error
}

func (w *WorkflowRequestInputRequest) Accept(visitor WorkflowRequestInputRequestVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// The input for a JSON variable in a Workflow.
type WorkflowRequestJsonInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string                 `json:"name" url:"name"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestJsonInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestJsonInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestJsonInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestJsonInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a number variable in a Workflow.
type WorkflowRequestNumberInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string  `json:"name" url:"name"`
	Value float64 `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestNumberInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestNumberInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestNumberInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestNumberInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// The input for a string variable in a Workflow.
type WorkflowRequestStringInputRequest struct {
	// The variable's name, as defined in the Workflow.
	Name  string `json:"name" url:"name"`
	Value string `json:"value" url:"value"`

	_rawJSON json.RawMessage
}

func (w *WorkflowRequestStringInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowRequestStringInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowRequestStringInputRequest(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowRequestStringInputRequest) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEvent struct {
	Id      string                         `json:"id" url:"id"`
	State   WorkflowNodeResultEventState   `json:"state,omitempty" url:"state,omitempty"`
	Ts      time.Time                      `json:"ts" url:"ts"`
	Output  *WorkflowResultEventOutputData `json:"output,omitempty" url:"output,omitempty"`
	Error   *WorkflowEventError            `json:"error,omitempty" url:"error,omitempty"`
	Outputs []*WorkflowOutput              `json:"outputs,omitempty" url:"outputs,omitempty"`
	Inputs  []*ExecutionVellumValue        `json:"inputs,omitempty" url:"inputs,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEvent) UnmarshalJSON(data []byte) error {
	type embed WorkflowResultEvent
	var unmarshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*w = WorkflowResultEvent(unmarshaler.embed)
	w.Ts = unmarshaler.Ts.Time()
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEvent) MarshalJSON() ([]byte, error) {
	type embed WorkflowResultEvent
	var marshaler = struct {
		embed
		Ts *core.DateTime `json:"ts"`
	}{
		embed: embed(*w),
		Ts:    core.NewDateTime(w.Ts),
	}
	return json.Marshal(marshaler)
}

func (w *WorkflowResultEvent) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowResultEventOutputData struct {
	Type          string
	String        *WorkflowResultEventOutputDataString
	Number        *WorkflowResultEventOutputDataNumber
	Json          *WorkflowResultEventOutputDataJson
	ChatHistory   *WorkflowResultEventOutputDataChatHistory
	SearchResults *WorkflowResultEventOutputDataSearchResults
	Array         *WorkflowResultEventOutputDataArray
	FunctionCall  *WorkflowResultEventOutputDataFunctionCall
	Error         *WorkflowResultEventOutputDataError
}

func (w *WorkflowResultEventOutputData) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "STRING":
		value := new(WorkflowResultEventOutputDataString)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.String = value
	case "NUMBER":
		value := new(WorkflowResultEventOutputDataNumber)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Number = value
	case "JSON":
		value := new(WorkflowResultEventOutputDataJson)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Json = value
	case "CHAT_HISTORY":
		value := new(WorkflowResultEventOutputDataChatHistory)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.ChatHistory = value
	case "SEARCH_RESULTS":
		value := new(WorkflowResultEventOutputDataSearchResults)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.SearchResults = value
	case "ARRAY":
		value := new(WorkflowResultEventOutputDataArray)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Array = value
	case "FUNCTION_CALL":
		value := new(WorkflowResultEventOutputDataFunctionCall)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.FunctionCall = value
	case "ERROR":
		value := new(WorkflowResultEventOutputDataError)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Error = value
	}
	return nil
}

func (w WorkflowResultEventOutputData) MarshalJSON() ([]byte, error) {
	if w.String != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataString
		}{
			Type:                                "STRING",
			WorkflowResultEventOutputDataString: w.String,
		}
		return json.Marshal(marshaler)
	}
	if w.Number != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataNumber
		}{
			Type:                                "NUMBER",
			WorkflowResultEventOutputDataNumber: w.Number,
		}
		return json.Marshal(marshaler)
	}
	if w.Json != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataJson
		}{
			Type:                              "JSON",
			WorkflowResultEventOutputDataJson: w.Json,
		}
		return json.Marshal(marshaler)
	}
	if w.ChatHistory != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataChatHistory
		}{
			Type:                                     "CHAT_HISTORY",
			WorkflowResultEventOutputDataChatHistory: w.ChatHistory,
		}
		return json.Marshal(marshaler)
	}
	if w.SearchResults != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataSearchResults
		}{
			Type: "SEARCH_RESULTS",
			WorkflowResultEventOutputDataSearchResults: w.SearchResults,
		}
		return json.Marshal(marshaler)
	}
	if w.Array != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataArray
		}{
			Type:                               "ARRAY",
			WorkflowResultEventOutputDataArray: w.Array,
		}
		return json.Marshal(marshaler)
	}
	if w.FunctionCall != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataFunctionCall
		}{
			Type: "FUNCTION_CALL",
			WorkflowResultEventOutputDataFunctionCall: w.FunctionCall,
		}
		return json.Marshal(marshaler)
	}
	if w.Error != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowResultEventOutputDataError
		}{
			Type:                               "ERROR",
			WorkflowResultEventOutputDataError: w.Error,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowResultEventOutputDataVisitor interface {
	VisitString(*WorkflowResultEventOutputDataString) error
	VisitNumber(*WorkflowResultEventOutputDataNumber) error
	VisitJson(*WorkflowResultEventOutputDataJson) error
	VisitChatHistory(*WorkflowResultEventOutputDataChatHistory) error
	VisitSearchResults(*WorkflowResultEventOutputDataSearchResults) error
	VisitArray(*WorkflowResultEventOutputDataArray) error
	VisitFunctionCall(*WorkflowResultEventOutputDataFunctionCall) error
	VisitError(*WorkflowResultEventOutputDataError) error
}

func (w *WorkflowResultEventOutputData) Accept(visitor WorkflowResultEventOutputDataVisitor) error {
	if w.String != nil {
		return visitor.VisitString(w.String)
	}
	if w.Number != nil {
		return visitor.VisitNumber(w.Number)
	}
	if w.Json != nil {
		return visitor.VisitJson(w.Json)
	}
	if w.ChatHistory != nil {
		return visitor.VisitChatHistory(w.ChatHistory)
	}
	if w.SearchResults != nil {
		return visitor.VisitSearchResults(w.SearchResults)
	}
	if w.Array != nil {
		return visitor.VisitArray(w.Array)
	}
	if w.FunctionCall != nil {
		return visitor.VisitFunctionCall(w.FunctionCall)
	}
	if w.Error != nil {
		return visitor.VisitError(w.Error)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}

// An Array output returned from a Workflow execution.
type WorkflowResultEventOutputDataArray struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string                   `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ArrayVariableValueItem `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataArray) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataArray
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataArray(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataArray) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Chat History output streamed from a Workflow execution.
type WorkflowResultEventOutputDataChatHistory struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string        `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*ChatMessage `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataChatHistory) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataChatHistory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataChatHistory(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataChatHistory) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// An Error output streamed from a Workflow execution.
type WorkflowResultEventOutputDataError struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string      `json:"delta,omitempty" url:"delta,omitempty"`
	Value *VellumError `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataError) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataError(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataError) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Function Call output returned from a Workflow execution.
type WorkflowResultEventOutputDataFunctionCall struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string       `json:"delta,omitempty" url:"delta,omitempty"`
	Value *FunctionCall `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataFunctionCall) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataFunctionCall
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataFunctionCall(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataFunctionCall) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A JSON output streamed from a Workflow execution.
type WorkflowResultEventOutputDataJson struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string                `json:"delta,omitempty" url:"delta,omitempty"`
	Value map[string]interface{} `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataJson) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataJson
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataJson(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataJson) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A number output streamed from a Workflow execution.
type WorkflowResultEventOutputDataNumber struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string  `json:"delta,omitempty" url:"delta,omitempty"`
	Value *float64 `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataNumber) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataNumber
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataNumber(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataNumber) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A Search Results output streamed from a Workflow execution.
type WorkflowResultEventOutputDataSearchResults struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value. Only relevant for string outputs with a state of STREAMING.
	Delta *string         `json:"delta,omitempty" url:"delta,omitempty"`
	Value []*SearchResult `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataSearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataSearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataSearchResults(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataSearchResults) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A string output streamed from a Workflow execution.
type WorkflowResultEventOutputDataString struct {
	Id     *string                      `json:"id,omitempty" url:"id,omitempty"`
	Name   string                       `json:"name" url:"name"`
	State  WorkflowNodeResultEventState `json:"state,omitempty" url:"state,omitempty"`
	NodeId string                       `json:"node_id" url:"node_id"`
	// The newly output string value, meant to be concatenated with all previous. Will be non-null for events of state STREAMING.
	Delta *string `json:"delta,omitempty" url:"delta,omitempty"`
	// The entire string value. Will be non-null for events of state FULFILLED.
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (w *WorkflowResultEventOutputDataString) UnmarshalJSON(data []byte) error {
	type unmarshaler WorkflowResultEventOutputDataString
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WorkflowResultEventOutputDataString(value)
	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WorkflowResultEventOutputDataString) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WorkflowStreamEvent struct {
	Type     string
	Workflow *WorkflowExecutionWorkflowResultEvent
	Node     *WorkflowExecutionNodeResultEvent
}

func (w *WorkflowStreamEvent) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	w.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "WORKFLOW":
		value := new(WorkflowExecutionWorkflowResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Workflow = value
	case "NODE":
		value := new(WorkflowExecutionNodeResultEvent)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		w.Node = value
	}
	return nil
}

func (w WorkflowStreamEvent) MarshalJSON() ([]byte, error) {
	if w.Workflow != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowExecutionWorkflowResultEvent
		}{
			Type:                                 "WORKFLOW",
			WorkflowExecutionWorkflowResultEvent: w.Workflow,
		}
		return json.Marshal(marshaler)
	}
	if w.Node != nil {
		var marshaler = struct {
			Type string `json:"type"`
			*WorkflowExecutionNodeResultEvent
		}{
			Type:                             "NODE",
			WorkflowExecutionNodeResultEvent: w.Node,
		}
		return json.Marshal(marshaler)
	}
	return nil, fmt.Errorf("type %T does not define a non-empty union type", w)
}

type WorkflowStreamEventVisitor interface {
	VisitWorkflow(*WorkflowExecutionWorkflowResultEvent) error
	VisitNode(*WorkflowExecutionNodeResultEvent) error
}

func (w *WorkflowStreamEvent) Accept(visitor WorkflowStreamEventVisitor) error {
	if w.Workflow != nil {
		return visitor.VisitWorkflow(w.Workflow)
	}
	if w.Node != nil {
		return visitor.VisitNode(w.Node)
	}
	return fmt.Errorf("type %T does not define a non-empty union type", w)
}
