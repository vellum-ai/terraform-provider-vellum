// This file was auto-generated by Fern from our API Definition.

package documents

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	vellum "github.com/vellum-ai/terraform-provider-vellum/internal/vellum"
	core "github.com/vellum-ai/terraform-provider-vellum/internal/vellum/core"
	option "github.com/vellum-ai/terraform-provider-vellum/internal/vellum/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Used to list documents. Optionally filter on supported fields.
func (c *Client) List(
	ctx context.Context,
	request *vellum.DocumentsListRequest,
	opts ...option.RequestOption,
) (*vellum.PaginatedSlimDocumentList, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "v1/documents"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *vellum.PaginatedSlimDocumentList
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) Destroy(
	ctx context.Context,
	// A UUID string identifying this document.
	id string,
	opts ...option.RequestOption,
) error {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/documents/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
		},
	); err != nil {
		return err
	}
	return nil
}

// Update a Document, keying off of its Vellum-generated ID. Particularly useful for updating its metadata.
func (c *Client) PartialUpdate(
	ctx context.Context,
	// A UUID string identifying this document.
	id string,
	request *vellum.PatchedDocumentUpdateRequest,
	opts ...option.RequestOption,
) (*vellum.DocumentRead, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"v1/documents/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *vellum.DocumentRead
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPatch,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Upload a document to be indexed and used for search.
//
// **Note:** Uses a base url of `https://documents.vellum.ai`.
//
// This is a multipart/form-data request. The `contents` field should be a file upload. It also expects a JSON body with the following fields:
//
// - `add_to_index_names: list[str]` - Optionally include the names of all indexes that you'd like this document to be included in
// - `external_id: str | None` - Optionally include an external ID for this document. This is useful if you want to re-upload the same document later when its contents change and would like it to be re-indexed.
// - `label: str` - A human-friendly name for this document. Typically the filename.
// - `keywords: list[str] | None` - Optionally include a list of keywords that'll be associated with this document. Used when performing keyword searches.
// - `metadata: dict[str, Any]` - A stringified JSON object containing any metadata associated with the document that you'd like to filter upon later.
func (c *Client) Upload(
	ctx context.Context,
	contents io.Reader,
	request *vellum.UploadDocumentBodyRequest,
	opts ...option.RequestOption,
) (*vellum.UploadDocumentResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://documents.vellum.ai"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/" + "v1/upload-document"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(vellum.BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 404:
			value := new(vellum.NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		case 500:
			value := new(vellum.InternalServerError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return apiError
			}
			return value
		}
		return apiError
	}

	var response *vellum.UploadDocumentResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	contentsFilename := "contents_filename"
	if named, ok := contents.(interface{ Name() string }); ok {
		contentsFilename = named.Name()
	}
	contentsPart, err := writer.CreateFormFile("contents", contentsFilename)
	if err != nil {
		return nil, err
	}
	if _, err := io.Copy(contentsPart, contents); err != nil {
		return nil, err
	}
	if request.AddToIndexNames != nil {
		if err := core.WriteMultipartJSON(writer, "add_to_index_names", request.AddToIndexNames); err != nil {
			return nil, err
		}
	}
	if request.ExternalId != nil {
		if err := writer.WriteField("external_id", fmt.Sprintf("%v", *request.ExternalId)); err != nil {
			return nil, err
		}
	}
	if err := writer.WriteField("label", fmt.Sprintf("%v", request.Label)); err != nil {
		return nil, err
	}
	if request.Keywords != nil {
		if err := core.WriteMultipartJSON(writer, "keywords", request.Keywords); err != nil {
			return nil, err
		}
	}
	if request.Metadata != nil {
		if err := writer.WriteField("metadata", fmt.Sprintf("%v", *request.Metadata)); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:          endpointURL,
			Method:       http.MethodPost,
			MaxAttempts:  options.MaxAttempts,
			Headers:      headers,
			Client:       options.HTTPClient,
			Request:      requestBuffer,
			Response:     &response,
			ErrorDecoder: errorDecoder,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
