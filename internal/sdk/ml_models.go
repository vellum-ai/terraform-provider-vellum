// This file was auto-generated by Fern from our API Definition.

package api

import (
	"encoding/json"
	"fmt"
	"terraform-provider-vellum/internal/sdk/core"
)

type MlModelCreateRequest struct {
	// The unique name of the ML Model.
	Name string `json:"name"`
	// The family of the ML Model.
	//
	// * `CAPYBARA` - Capybara
	// * `CHAT_GPT` - Chat GPT
	// * `CLAUDE` - Claude
	// * `COHERE` - Cohere
	// * `FALCON` - Falcon
	// * `GEMINI` - Gemini
	// * `GRANITE` - Granite
	// * `GPT3` - GPT-3
	// * `FIREWORKS` - Fireworks
	// * `LLAMA2` - Llama2
	// * `LLAMA3` - Llama3
	// * `MISTRAL` - Mistral
	// * `MPT` - MPT
	// * `OPENCHAT` - OpenChat
	// * `PALM` - PaLM
	// * `SOLAR` - Solar
	// * `TITAN` - Titan
	// * `WIZARD` - Wizard
	// * `YI` - Yi
	// * `ZEPHYR` - Zephyr
	Family MlModelFamily `json:"family,omitempty"`
	// The organization hosting the ML Model.
	//
	// * `ANTHROPIC` - ANTHROPIC
	// * `AWS_BEDROCK` - AWS_BEDROCK
	// * `AZURE_OPENAI` - AZURE_OPENAI
	// * `COHERE` - COHERE
	// * `CUSTOM` - CUSTOM
	// * `FIREWORKS_AI` - FIREWORKS_AI
	// * `GOOGLE` - GOOGLE
	// * `GOOGLE_VERTEX_AI` - GOOGLE_VERTEX_AI
	// * `GROQ` - GROQ
	// * `HUGGINGFACE` - HUGGINGFACE
	// * `IBM_WATSONX` - IBM_WATSONX
	// * `MOSAICML` - MOSAICML
	// * `MYSTIC` - MYSTIC
	// * `OPENAI` - OPENAI
	// * `OPENPIPE` - OPENPIPE
	// * `PYQ` - PYQ
	// * `REPLICATE` - REPLICATE
	HostedBy HostedByEnum `json:"hosted_by,omitempty"`
	// The organization that developed the ML Model.
	//
	// * `01_AI` - 01_AI
	// * `AMAZON` - AMAZON
	// * `ANTHROPIC` - ANTHROPIC
	// * `COHERE` - COHERE
	// * `ELUTHERAI` - ELUTHERAI
	// * `FIREWORKS_AI` - FIREWORKS_AI
	// * `GOOGLE` - GOOGLE
	// * `HUGGINGFACE` - HUGGINGFACE
	// * `IBM` - IBM
	// * `META` - META
	// * `MISTRAL_AI` - MISTRAL_AI
	// * `MOSAICML` - MOSAICML
	// * `NOUS_RESEARCH` - NOUS_RESEARCH
	// * `OPENAI` - OPENAI
	// * `OPENCHAT` - OPENCHAT
	// * `OPENPIPE` - OPENPIPE
	// * `TII` - TII
	// * `WIZARDLM` - WIZARDLM
	DevelopedBy MlModelDeveloper `json:"developed_by,omitempty"`
	// Configuration for how to execute the ML Model.
	ExecConfig *MlModelExecConfigRequest `json:"exec_config,omitempty"`
	// Configuration for the ML Model's parameters.
	ParameterConfig *MlModelParameterConfigRequest `json:"parameter_config,omitempty"`
	// Configuration for how to display the ML Model.
	DisplayConfig *MlModelDisplayConfigRequest `json:"display_config,omitempty"`
	// The visibility of the ML Model.
	//
	// * `DEFAULT` - DEFAULT
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	// * `DISABLED` - DISABLED
	Visibility *VisibilityEnum `json:"visibility,omitempty"`
}

type MlModelsListRequest struct {
	// Number of results to return per page.
	Limit *int `json:"-"`
	// The initial index from which to return the results.
	Offset *int `json:"-"`
	// Which field to use when ordering the results.
	Ordering *string `json:"-"`
}

type PatchedMlModelUpdateRequest struct {
	// Configuration for how to display the ML Model.
	DisplayConfig *MlModelDisplayConfigRequest `json:"display_config,omitempty"`
	// The visibility of the ML Model.
	//
	// * `DEFAULT` - DEFAULT
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	// * `DISABLED` - DISABLED
	Visibility *VisibilityEnum `json:"visibility,omitempty"`
}

type MlModelUpdateRequest struct {
	// Configuration for how to display the ML Model.
	DisplayConfig *MlModelDisplayConfigRequest `json:"display_config,omitempty"`
	// The visibility of the ML Model.
	//
	// * `DEFAULT` - DEFAULT
	// * `PUBLIC` - PUBLIC
	// * `PRIVATE` - PRIVATE
	// * `DISABLED` - DISABLED
	Visibility *VisibilityEnum `json:"visibility,omitempty"`
}

// - `01_AI` - 01_AI
// - `AMAZON` - AMAZON
// - `ANTHROPIC` - ANTHROPIC
// - `COHERE` - COHERE
// - `ELUTHERAI` - ELUTHERAI
// - `FIREWORKS_AI` - FIREWORKS_AI
// - `GOOGLE` - GOOGLE
// - `HUGGINGFACE` - HUGGINGFACE
// - `IBM` - IBM
// - `META` - META
// - `MISTRAL_AI` - MISTRAL_AI
// - `MOSAICML` - MOSAICML
// - `NOUS_RESEARCH` - NOUS_RESEARCH
// - `OPENAI` - OPENAI
// - `OPENCHAT` - OPENCHAT
// - `OPENPIPE` - OPENPIPE
// - `TII` - TII
// - `WIZARDLM` - WIZARDLM
type MlModelDeveloper string

const (
	MlModelDeveloperOneAi        MlModelDeveloper = "01_AI"
	MlModelDeveloperAmazon       MlModelDeveloper = "AMAZON"
	MlModelDeveloperAnthropic    MlModelDeveloper = "ANTHROPIC"
	MlModelDeveloperCohere       MlModelDeveloper = "COHERE"
	MlModelDeveloperElutherai    MlModelDeveloper = "ELUTHERAI"
	MlModelDeveloperFireworksAi  MlModelDeveloper = "FIREWORKS_AI"
	MlModelDeveloperGoogle       MlModelDeveloper = "GOOGLE"
	MlModelDeveloperHuggingface  MlModelDeveloper = "HUGGINGFACE"
	MlModelDeveloperIbm          MlModelDeveloper = "IBM"
	MlModelDeveloperMeta         MlModelDeveloper = "META"
	MlModelDeveloperMistralAi    MlModelDeveloper = "MISTRAL_AI"
	MlModelDeveloperMosaicml     MlModelDeveloper = "MOSAICML"
	MlModelDeveloperNousResearch MlModelDeveloper = "NOUS_RESEARCH"
	MlModelDeveloperOpenai       MlModelDeveloper = "OPENAI"
	MlModelDeveloperOpenchat     MlModelDeveloper = "OPENCHAT"
	MlModelDeveloperOpenpipe     MlModelDeveloper = "OPENPIPE"
	MlModelDeveloperTii          MlModelDeveloper = "TII"
	MlModelDeveloperWizardlm     MlModelDeveloper = "WIZARDLM"
)

func NewMlModelDeveloperFromString(s string) (MlModelDeveloper, error) {
	switch s {
	case "01_AI":
		return MlModelDeveloperOneAi, nil
	case "AMAZON":
		return MlModelDeveloperAmazon, nil
	case "ANTHROPIC":
		return MlModelDeveloperAnthropic, nil
	case "COHERE":
		return MlModelDeveloperCohere, nil
	case "ELUTHERAI":
		return MlModelDeveloperElutherai, nil
	case "FIREWORKS_AI":
		return MlModelDeveloperFireworksAi, nil
	case "GOOGLE":
		return MlModelDeveloperGoogle, nil
	case "HUGGINGFACE":
		return MlModelDeveloperHuggingface, nil
	case "IBM":
		return MlModelDeveloperIbm, nil
	case "META":
		return MlModelDeveloperMeta, nil
	case "MISTRAL_AI":
		return MlModelDeveloperMistralAi, nil
	case "MOSAICML":
		return MlModelDeveloperMosaicml, nil
	case "NOUS_RESEARCH":
		return MlModelDeveloperNousResearch, nil
	case "OPENAI":
		return MlModelDeveloperOpenai, nil
	case "OPENCHAT":
		return MlModelDeveloperOpenchat, nil
	case "OPENPIPE":
		return MlModelDeveloperOpenpipe, nil
	case "TII":
		return MlModelDeveloperTii, nil
	case "WIZARDLM":
		return MlModelDeveloperWizardlm, nil
	}
	var t MlModelDeveloper
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelDeveloper) Ptr() *MlModelDeveloper {
	return &m
}

type MlModelDeveloperEnumValueLabel struct {
	Label string           `json:"label"`
	Value MlModelDeveloper `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelDeveloperEnumValueLabel) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDeveloperEnumValueLabel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDeveloperEnumValueLabel(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDeveloperEnumValueLabel) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelDisplayConfigLabelled struct {
	Label       string                             `json:"label"`
	Description string                             `json:"description"`
	Tags        []*MlModelDisplayTagEnumValueLabel `json:"tags,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelDisplayConfigLabelled) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayConfigLabelled
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayConfigLabelled(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayConfigLabelled) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelDisplayConfigRequest struct {
	Label       string              `json:"label"`
	Description string              `json:"description"`
	Tags        []MlModelDisplayTag `json:"tags,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelDisplayConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `TEXT` - TEXT
// - `CHAT` - CHAT
// - `OPEN_SOURCE` - OPEN_SOURCE
// - `FINETUNED` - FINETUNED
// - `NEW` - NEW
// - `ALPHA` - ALPHA
// - `BETA` - BETA
// - `DEPRECATED` - DEPRECATED
type MlModelDisplayTag string

const (
	MlModelDisplayTagText       MlModelDisplayTag = "TEXT"
	MlModelDisplayTagChat       MlModelDisplayTag = "CHAT"
	MlModelDisplayTagOpenSource MlModelDisplayTag = "OPEN_SOURCE"
	MlModelDisplayTagFinetuned  MlModelDisplayTag = "FINETUNED"
	MlModelDisplayTagNew        MlModelDisplayTag = "NEW"
	MlModelDisplayTagAlpha      MlModelDisplayTag = "ALPHA"
	MlModelDisplayTagBeta       MlModelDisplayTag = "BETA"
	MlModelDisplayTagDeprecated MlModelDisplayTag = "DEPRECATED"
)

func NewMlModelDisplayTagFromString(s string) (MlModelDisplayTag, error) {
	switch s {
	case "TEXT":
		return MlModelDisplayTagText, nil
	case "CHAT":
		return MlModelDisplayTagChat, nil
	case "OPEN_SOURCE":
		return MlModelDisplayTagOpenSource, nil
	case "FINETUNED":
		return MlModelDisplayTagFinetuned, nil
	case "NEW":
		return MlModelDisplayTagNew, nil
	case "ALPHA":
		return MlModelDisplayTagAlpha, nil
	case "BETA":
		return MlModelDisplayTagBeta, nil
	case "DEPRECATED":
		return MlModelDisplayTagDeprecated, nil
	}
	var t MlModelDisplayTag
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelDisplayTag) Ptr() *MlModelDisplayTag {
	return &m
}

type MlModelDisplayTagEnumValueLabel struct {
	Label string            `json:"label"`
	Value MlModelDisplayTag `json:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelDisplayTagEnumValueLabel) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelDisplayTagEnumValueLabel
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelDisplayTagEnumValueLabel(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelDisplayTagEnumValueLabel) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelExecConfig struct {
	ModelIdentifier string                  `json:"model_identifier"`
	BaseUrl         string                  `json:"base_url"`
	Metadata        map[string]string       `json:"metadata"`
	Features        []MlModelFeature        `json:"features"`
	TokenizerConfig *MlModelTokenizerConfig `json:"tokenizer_config,omitempty"`
	RequestConfig   *MlModelRequestConfig   `json:"request_config,omitempty"`
	ResponseConfig  *MlModelResponseConfig  `json:"response_config,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelExecConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelExecConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelExecConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelExecConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelExecConfigRequest struct {
	ModelIdentifier string                         `json:"model_identifier"`
	BaseUrl         string                         `json:"base_url"`
	Metadata        map[string]interface{}         `json:"metadata"`
	Features        []MlModelFeature               `json:"features"`
	TokenizerConfig *MlModelTokenizerConfigRequest `json:"tokenizer_config,omitempty"`
	RequestConfig   *MlModelRequestConfigRequest   `json:"request_config,omitempty"`
	ResponseConfig  *MlModelResponseConfigRequest  `json:"response_config,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelExecConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelExecConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelExecConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelExecConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `TEXT` - Text
// - `CHAT_MESSAGE_SYSTEM` - Chat Message System
// - `CHAT_MESSAGE_USER` - Chat Message User
// - `CHAT_MESSAGE_ASSISTANT` - Chat Message Assistant
// - `CHAT_MESSAGE_ASSISTANT_UNTERMINATED` - Chat Message Assistant Unterminated
// - `CHAT_MESSAGE_FUNCTION_CALL` - Chat Message Function Call
// - `CHAT_MESSAGE_IMAGE` - Chat Message Image
// - `FUNCTION_DEFINITION` - Function Definition
// - `STREAMING_SUPPORT` - Streaming Support
type MlModelFeature string

const (
	MlModelFeatureText                             MlModelFeature = "TEXT"
	MlModelFeatureChatMessageSystem                MlModelFeature = "CHAT_MESSAGE_SYSTEM"
	MlModelFeatureChatMessageUser                  MlModelFeature = "CHAT_MESSAGE_USER"
	MlModelFeatureChatMessageAssistant             MlModelFeature = "CHAT_MESSAGE_ASSISTANT"
	MlModelFeatureChatMessageAssistantUnterminated MlModelFeature = "CHAT_MESSAGE_ASSISTANT_UNTERMINATED"
	MlModelFeatureChatMessageFunctionCall          MlModelFeature = "CHAT_MESSAGE_FUNCTION_CALL"
	MlModelFeatureChatMessageImage                 MlModelFeature = "CHAT_MESSAGE_IMAGE"
	MlModelFeatureFunctionDefinition               MlModelFeature = "FUNCTION_DEFINITION"
	MlModelFeatureStreamingSupport                 MlModelFeature = "STREAMING_SUPPORT"
)

func NewMlModelFeatureFromString(s string) (MlModelFeature, error) {
	switch s {
	case "TEXT":
		return MlModelFeatureText, nil
	case "CHAT_MESSAGE_SYSTEM":
		return MlModelFeatureChatMessageSystem, nil
	case "CHAT_MESSAGE_USER":
		return MlModelFeatureChatMessageUser, nil
	case "CHAT_MESSAGE_ASSISTANT":
		return MlModelFeatureChatMessageAssistant, nil
	case "CHAT_MESSAGE_ASSISTANT_UNTERMINATED":
		return MlModelFeatureChatMessageAssistantUnterminated, nil
	case "CHAT_MESSAGE_FUNCTION_CALL":
		return MlModelFeatureChatMessageFunctionCall, nil
	case "CHAT_MESSAGE_IMAGE":
		return MlModelFeatureChatMessageImage, nil
	case "FUNCTION_DEFINITION":
		return MlModelFeatureFunctionDefinition, nil
	case "STREAMING_SUPPORT":
		return MlModelFeatureStreamingSupport, nil
	}
	var t MlModelFeature
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelFeature) Ptr() *MlModelFeature {
	return &m
}

type MlModelParameterConfig struct {
	Temperature      *OpenApiNumberProperty      `json:"temperature,omitempty"`
	MaxTokens        *OpenApiIntegerProperty     `json:"max_tokens,omitempty"`
	Stop             *OpenApiArrayProperty       `json:"stop,omitempty"`
	TopP             *OpenApiNumberProperty      `json:"top_p,omitempty"`
	TopK             *OpenApiIntegerProperty     `json:"top_k,omitempty"`
	FrequencyPenalty *OpenApiNumberProperty      `json:"frequency_penalty,omitempty"`
	PresencePenalty  *OpenApiNumberProperty      `json:"presence_penalty,omitempty"`
	LogitBias        *OpenApiObjectProperty      `json:"logit_bias,omitempty"`
	CustomParameters map[string]*OpenApiProperty `json:"custom_parameters,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelParameterConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelParameterConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelParameterConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelParameterConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelParameterConfigRequest struct {
	Temperature      *OpenApiNumberPropertyRequest      `json:"temperature,omitempty"`
	MaxTokens        *OpenApiIntegerPropertyRequest     `json:"max_tokens,omitempty"`
	Stop             *OpenApiArrayPropertyRequest       `json:"stop,omitempty"`
	TopP             *OpenApiNumberPropertyRequest      `json:"top_p,omitempty"`
	TopK             *OpenApiIntegerPropertyRequest     `json:"top_k,omitempty"`
	FrequencyPenalty *OpenApiNumberPropertyRequest      `json:"frequency_penalty,omitempty"`
	PresencePenalty  *OpenApiNumberPropertyRequest      `json:"presence_penalty,omitempty"`
	LogitBias        *OpenApiObjectPropertyRequest      `json:"logit_bias,omitempty"`
	CustomParameters map[string]*OpenApiPropertyRequest `json:"custom_parameters,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelParameterConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelParameterConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelParameterConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelParameterConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// An ML Model that your Workspace has access to.
type MlModelRead struct {
	Id string `json:"id"`
	// The unique name of the ML Model.
	Name string `json:"name"`
	// The family of the ML Model.
	Family *MlModelFamilyEnumValueLabel `json:"family,omitempty"`
	// The organization hosting the ML Model.
	//
	// - `ANTHROPIC` - Anthropic
	// - `AWS_BEDROCK` - AWS Bedrock
	// - `AZURE_OPENAI` - Azure OpenAI
	// - `COHERE` - Cohere
	// - `CUSTOM` - Custom
	// - `FIREWORKS_AI` - Fireworks AI
	// - `GOOGLE` - Google
	// - `GOOGLE_VERTEX_AI` - Google Vertex AI
	// - `GROQ` - Groq
	// - `HUGGINGFACE` - HuggingFace
	// - `IBM_WATSONX` - IBM WatsonX
	// - `MOSAICML` - MosaicML
	// - `MYSTIC` - Mystic
	// - `OPENAI` - OpenAI
	// - `OPENPIPE` - OpenPipe
	// - `PYQ` - Pyq
	// - `REPLICATE` - Replicate
	HostedBy HostedByEnum `json:"hosted_by,omitempty"`
	// The organization that developed the ML Model.
	DevelopedBy *MlModelDeveloperEnumValueLabel `json:"developed_by,omitempty"`
	// The visibility of the ML Model.
	//
	// - `DEFAULT` - Default
	// - `PUBLIC` - Public
	// - `PRIVATE` - Private
	// - `DISABLED` - Disabled
	Visibility *VisibilityEnum `json:"visibility,omitempty"`
	// Configuration for how to execute the ML Model.
	ExecConfig *MlModelExecConfig `json:"exec_config,omitempty"`
	// Configuration for the ML Model's parameters.
	ParameterConfig *MlModelParameterConfig `json:"parameter_config,omitempty"`
	// Configuration for how to display the ML Model.
	DisplayConfig *MlModelDisplayConfigLabelled `json:"display_config,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelRead) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRead
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRead(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRead) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestAuthorizationConfig struct {
	Type MlModelRequestAuthorizationConfigTypeEnum `json:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelRequestAuthorizationConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestAuthorizationConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestAuthorizationConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestAuthorizationConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestAuthorizationConfigRequest struct {
	Type MlModelRequestAuthorizationConfigTypeEnum `json:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelRequestAuthorizationConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestAuthorizationConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestAuthorizationConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestAuthorizationConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// - `BEARER_TOKEN` - Bearer Token
// - `API_KEY` - API Key
type MlModelRequestAuthorizationConfigTypeEnum string

const (
	MlModelRequestAuthorizationConfigTypeEnumBearerToken MlModelRequestAuthorizationConfigTypeEnum = "BEARER_TOKEN"
	MlModelRequestAuthorizationConfigTypeEnumApiKey      MlModelRequestAuthorizationConfigTypeEnum = "API_KEY"
)

func NewMlModelRequestAuthorizationConfigTypeEnumFromString(s string) (MlModelRequestAuthorizationConfigTypeEnum, error) {
	switch s {
	case "BEARER_TOKEN":
		return MlModelRequestAuthorizationConfigTypeEnumBearerToken, nil
	case "API_KEY":
		return MlModelRequestAuthorizationConfigTypeEnumApiKey, nil
	}
	var t MlModelRequestAuthorizationConfigTypeEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MlModelRequestAuthorizationConfigTypeEnum) Ptr() *MlModelRequestAuthorizationConfigTypeEnum {
	return &m
}

type MlModelRequestConfig struct {
	Headers       map[string]*string                 `json:"headers,omitempty"`
	Authorization *MlModelRequestAuthorizationConfig `json:"authorization,omitempty"`
	BodyTemplate  *string                            `json:"body_template,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelRequestConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelRequestConfigRequest struct {
	Headers       map[string]*string                        `json:"headers,omitempty"`
	Authorization *MlModelRequestAuthorizationConfigRequest `json:"authorization,omitempty"`
	BodyTemplate  *string                                   `json:"body_template,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelRequestConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelRequestConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelRequestConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelRequestConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelResponseConfig struct {
	ResultPath                *string            `json:"result_path,omitempty"`
	ResultExtractionRegex     *string            `json:"result_extraction_regex,omitempty"`
	ResultSubstitutionRegexes map[string]*string `json:"result_substitution_regexes,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelResponseConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelResponseConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelResponseConfig(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelResponseConfig) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelResponseConfigRequest struct {
	ResultPath                *string            `json:"result_path,omitempty"`
	ResultExtractionRegex     *string            `json:"result_extraction_regex,omitempty"`
	ResultSubstitutionRegexes map[string]*string `json:"result_substitution_regexes,omitempty"`

	_rawJSON json.RawMessage
}

func (m *MlModelResponseConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler MlModelResponseConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MlModelResponseConfigRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MlModelResponseConfigRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MlModelTokenizerConfig struct {
	Type        string
	HuggingFace *HuggingFaceTokenizerConfig
	Tiktoken    *TikTokenTokenizerConfig
}

func NewMlModelTokenizerConfigFromHuggingFace(value *HuggingFaceTokenizerConfig) *MlModelTokenizerConfig {
	return &MlModelTokenizerConfig{Type: "HUGGING_FACE", HuggingFace: value}
}

func NewMlModelTokenizerConfigFromTiktoken(value *TikTokenTokenizerConfig) *MlModelTokenizerConfig {
	return &MlModelTokenizerConfig{Type: "TIKTOKEN", Tiktoken: value}
}

func (m *MlModelTokenizerConfig) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	m.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "HUGGING_FACE":
		value := new(HuggingFaceTokenizerConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.HuggingFace = value
	case "TIKTOKEN":
		value := new(TikTokenTokenizerConfig)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.Tiktoken = value
	}
	return nil
}

func (m MlModelTokenizerConfig) MarshalJSON() ([]byte, error) {
	switch m.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.Type, m)
	case "HUGGING_FACE":
		var marshaler = struct {
			Type string `json:"type"`
			*HuggingFaceTokenizerConfig
		}{
			Type:                       m.Type,
			HuggingFaceTokenizerConfig: m.HuggingFace,
		}
		return json.Marshal(marshaler)
	case "TIKTOKEN":
		var marshaler = struct {
			Type string `json:"type"`
			*TikTokenTokenizerConfig
		}{
			Type:                    m.Type,
			TikTokenTokenizerConfig: m.Tiktoken,
		}
		return json.Marshal(marshaler)
	}
}

type MlModelTokenizerConfigVisitor interface {
	VisitHuggingFace(*HuggingFaceTokenizerConfig) error
	VisitTiktoken(*TikTokenTokenizerConfig) error
}

func (m *MlModelTokenizerConfig) Accept(visitor MlModelTokenizerConfigVisitor) error {
	switch m.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", m.Type, m)
	case "HUGGING_FACE":
		return visitor.VisitHuggingFace(m.HuggingFace)
	case "TIKTOKEN":
		return visitor.VisitTiktoken(m.Tiktoken)
	}
}

type MlModelTokenizerConfigRequest struct {
	Type        string
	HuggingFace *HuggingFaceTokenizerConfigRequest
	Tiktoken    *TikTokenTokenizerConfigRequest
}

func NewMlModelTokenizerConfigRequestFromHuggingFace(value *HuggingFaceTokenizerConfigRequest) *MlModelTokenizerConfigRequest {
	return &MlModelTokenizerConfigRequest{Type: "HUGGING_FACE", HuggingFace: value}
}

func NewMlModelTokenizerConfigRequestFromTiktoken(value *TikTokenTokenizerConfigRequest) *MlModelTokenizerConfigRequest {
	return &MlModelTokenizerConfigRequest{Type: "TIKTOKEN", Tiktoken: value}
}

func (m *MlModelTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	m.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "HUGGING_FACE":
		value := new(HuggingFaceTokenizerConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.HuggingFace = value
	case "TIKTOKEN":
		value := new(TikTokenTokenizerConfigRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		m.Tiktoken = value
	}
	return nil
}

func (m MlModelTokenizerConfigRequest) MarshalJSON() ([]byte, error) {
	switch m.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", m.Type, m)
	case "HUGGING_FACE":
		var marshaler = struct {
			Type string `json:"type"`
			*HuggingFaceTokenizerConfigRequest
		}{
			Type:                              m.Type,
			HuggingFaceTokenizerConfigRequest: m.HuggingFace,
		}
		return json.Marshal(marshaler)
	case "TIKTOKEN":
		var marshaler = struct {
			Type string `json:"type"`
			*TikTokenTokenizerConfigRequest
		}{
			Type:                           m.Type,
			TikTokenTokenizerConfigRequest: m.Tiktoken,
		}
		return json.Marshal(marshaler)
	}
}

type MlModelTokenizerConfigRequestVisitor interface {
	VisitHuggingFace(*HuggingFaceTokenizerConfigRequest) error
	VisitTiktoken(*TikTokenTokenizerConfigRequest) error
}

func (m *MlModelTokenizerConfigRequest) Accept(visitor MlModelTokenizerConfigRequestVisitor) error {
	switch m.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", m.Type, m)
	case "HUGGING_FACE":
		return visitor.VisitHuggingFace(m.HuggingFace)
	case "TIKTOKEN":
		return visitor.VisitTiktoken(m.Tiktoken)
	}
}

// - `ANTHROPIC` - ANTHROPIC
// - `AWS_BEDROCK` - AWS_BEDROCK
// - `AZURE_OPENAI` - AZURE_OPENAI
// - `COHERE` - COHERE
// - `CUSTOM` - CUSTOM
// - `FIREWORKS_AI` - FIREWORKS_AI
// - `GOOGLE` - GOOGLE
// - `GOOGLE_VERTEX_AI` - GOOGLE_VERTEX_AI
// - `GROQ` - GROQ
// - `HUGGINGFACE` - HUGGINGFACE
// - `IBM_WATSONX` - IBM_WATSONX
// - `MOSAICML` - MOSAICML
// - `MYSTIC` - MYSTIC
// - `OPENAI` - OPENAI
// - `OPENPIPE` - OPENPIPE
// - `PYQ` - PYQ
// - `REPLICATE` - REPLICATE
type HostedByEnum string

const (
	HostedByEnumAnthropic      HostedByEnum = "ANTHROPIC"
	HostedByEnumAwsBedrock     HostedByEnum = "AWS_BEDROCK"
	HostedByEnumAzureOpenai    HostedByEnum = "AZURE_OPENAI"
	HostedByEnumCohere         HostedByEnum = "COHERE"
	HostedByEnumCustom         HostedByEnum = "CUSTOM"
	HostedByEnumFireworksAi    HostedByEnum = "FIREWORKS_AI"
	HostedByEnumGoogle         HostedByEnum = "GOOGLE"
	HostedByEnumGoogleVertexAi HostedByEnum = "GOOGLE_VERTEX_AI"
	HostedByEnumGroq           HostedByEnum = "GROQ"
	HostedByEnumHuggingface    HostedByEnum = "HUGGINGFACE"
	HostedByEnumIbmWatsonx     HostedByEnum = "IBM_WATSONX"
	HostedByEnumMosaicml       HostedByEnum = "MOSAICML"
	HostedByEnumMystic         HostedByEnum = "MYSTIC"
	HostedByEnumOpenai         HostedByEnum = "OPENAI"
	HostedByEnumOpenpipe       HostedByEnum = "OPENPIPE"
	HostedByEnumPyq            HostedByEnum = "PYQ"
	HostedByEnumReplicate      HostedByEnum = "REPLICATE"
)

func NewHostedByEnumFromString(s string) (HostedByEnum, error) {
	switch s {
	case "ANTHROPIC":
		return HostedByEnumAnthropic, nil
	case "AWS_BEDROCK":
		return HostedByEnumAwsBedrock, nil
	case "AZURE_OPENAI":
		return HostedByEnumAzureOpenai, nil
	case "COHERE":
		return HostedByEnumCohere, nil
	case "CUSTOM":
		return HostedByEnumCustom, nil
	case "FIREWORKS_AI":
		return HostedByEnumFireworksAi, nil
	case "GOOGLE":
		return HostedByEnumGoogle, nil
	case "GOOGLE_VERTEX_AI":
		return HostedByEnumGoogleVertexAi, nil
	case "GROQ":
		return HostedByEnumGroq, nil
	case "HUGGINGFACE":
		return HostedByEnumHuggingface, nil
	case "IBM_WATSONX":
		return HostedByEnumIbmWatsonx, nil
	case "MOSAICML":
		return HostedByEnumMosaicml, nil
	case "MYSTIC":
		return HostedByEnumMystic, nil
	case "OPENAI":
		return HostedByEnumOpenai, nil
	case "OPENPIPE":
		return HostedByEnumOpenpipe, nil
	case "PYQ":
		return HostedByEnumPyq, nil
	case "REPLICATE":
		return HostedByEnumReplicate, nil
	}
	var t HostedByEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (h HostedByEnum) Ptr() *HostedByEnum {
	return &h
}

// Tokenizer config for Hugging Face type tokenizers.
type HuggingFaceTokenizerConfig struct {
	Name string  `json:"name"`
	Path *string `json:"path,omitempty"`

	_rawJSON json.RawMessage
}

func (h *HuggingFaceTokenizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler HuggingFaceTokenizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HuggingFaceTokenizerConfig(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HuggingFaceTokenizerConfig) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Tokenizer config for Hugging Face type tokenizers.
type HuggingFaceTokenizerConfigRequest struct {
	Name string  `json:"name"`
	Path *string `json:"path,omitempty"`

	_rawJSON json.RawMessage
}

func (h *HuggingFaceTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler HuggingFaceTokenizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HuggingFaceTokenizerConfigRequest(value)
	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HuggingFaceTokenizerConfigRequest) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

// Tokenizer config for OpenAI's TikToken type tokenizers.
type TikTokenTokenizerConfig struct {
	Name string `json:"name"`

	_rawJSON json.RawMessage
}

func (t *TikTokenTokenizerConfig) UnmarshalJSON(data []byte) error {
	type unmarshaler TikTokenTokenizerConfig
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TikTokenTokenizerConfig(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TikTokenTokenizerConfig) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Tokenizer config for OpenAI's TikToken type tokenizers.
type TikTokenTokenizerConfigRequest struct {
	Name string `json:"name"`

	_rawJSON json.RawMessage
}

func (t *TikTokenTokenizerConfigRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler TikTokenTokenizerConfigRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TikTokenTokenizerConfigRequest(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TikTokenTokenizerConfigRequest) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// - `DEFAULT` - DEFAULT
// - `PUBLIC` - PUBLIC
// - `PRIVATE` - PRIVATE
// - `DISABLED` - DISABLED
type VisibilityEnum string

const (
	VisibilityEnumDefault  VisibilityEnum = "DEFAULT"
	VisibilityEnumPublic   VisibilityEnum = "PUBLIC"
	VisibilityEnumPrivate  VisibilityEnum = "PRIVATE"
	VisibilityEnumDisabled VisibilityEnum = "DISABLED"
)

func NewVisibilityEnumFromString(s string) (VisibilityEnum, error) {
	switch s {
	case "DEFAULT":
		return VisibilityEnumDefault, nil
	case "PUBLIC":
		return VisibilityEnumPublic, nil
	case "PRIVATE":
		return VisibilityEnumPrivate, nil
	case "DISABLED":
		return VisibilityEnumDisabled, nil
	}
	var t VisibilityEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VisibilityEnum) Ptr() *VisibilityEnum {
	return &v
}

// An OpenAPI specification of a parameter with type 'array'
type OpenApiArrayProperty struct {
	MinItems    *int               `json:"min_items,omitempty"`
	MaxItems    *int               `json:"max_items,omitempty"`
	UniqueItems *bool              `json:"unique_items,omitempty"`
	Items       *OpenApiProperty   `json:"items,omitempty"`
	PrefixItems []*OpenApiProperty `json:"prefix_items,omitempty"`
	Contains    *OpenApiProperty   `json:"contains,omitempty"`
	MinContains *int               `json:"min_contains,omitempty"`
	MaxContains *int               `json:"max_contains,omitempty"`
	Default     []interface{}      `json:"default,omitempty"`
	Title       *string            `json:"title,omitempty"`
	Description *string            `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiArrayProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiArrayProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiArrayProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiArrayProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'array'
type OpenApiArrayPropertyRequest struct {
	MinItems    *int                      `json:"min_items,omitempty"`
	MaxItems    *int                      `json:"max_items,omitempty"`
	UniqueItems *bool                     `json:"unique_items,omitempty"`
	Items       *OpenApiPropertyRequest   `json:"items,omitempty"`
	PrefixItems []*OpenApiPropertyRequest `json:"prefix_items,omitempty"`
	Contains    *OpenApiPropertyRequest   `json:"contains,omitempty"`
	MinContains *int                      `json:"min_contains,omitempty"`
	MaxContains *int                      `json:"max_contains,omitempty"`
	Default     []interface{}             `json:"default,omitempty"`
	Title       *string                   `json:"title,omitempty"`
	Description *string                   `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiArrayPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiArrayPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiArrayPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiArrayPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'boolean'
type OpenApiBooleanProperty struct {
	Default     *bool   `json:"default,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiBooleanProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiBooleanProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiBooleanProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiBooleanProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'boolean'
type OpenApiBooleanPropertyRequest struct {
	Default     *bool   `json:"default,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiBooleanPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiBooleanPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiBooleanPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiBooleanPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'const'
type OpenApiConstProperty struct {
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Const       string  `json:"const"`

	_rawJSON json.RawMessage
}

func (o *OpenApiConstProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiConstProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiConstProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiConstProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'const'
type OpenApiConstPropertyRequest struct {
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Const       string  `json:"const"`

	_rawJSON json.RawMessage
}

func (o *OpenApiConstPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiConstPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiConstPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiConstPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'integer'
type OpenApiIntegerProperty struct {
	Minimum          *int    `json:"minimum,omitempty"`
	Maximum          *int    `json:"maximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusive_maximum,omitempty"`
	Default          *int    `json:"default,omitempty"`
	Title            *string `json:"title,omitempty"`
	Description      *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiIntegerProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiIntegerProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiIntegerProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiIntegerProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'integer'
type OpenApiIntegerPropertyRequest struct {
	Minimum          *int    `json:"minimum,omitempty"`
	Maximum          *int    `json:"maximum,omitempty"`
	ExclusiveMinimum *bool   `json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool   `json:"exclusive_maximum,omitempty"`
	Default          *int    `json:"default,omitempty"`
	Title            *string `json:"title,omitempty"`
	Description      *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiIntegerPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiIntegerPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiIntegerPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiIntegerPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'number'
type OpenApiNumberProperty struct {
	Minimum          *float64 `json:"minimum,omitempty"`
	Maximum          *float64 `json:"maximum,omitempty"`
	Format           *string  `json:"format,omitempty"`
	ExclusiveMinimum *bool    `json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool    `json:"exclusive_maximum,omitempty"`
	Default          *float64 `json:"default,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Description      *string  `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiNumberProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiNumberProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiNumberProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiNumberProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'number'
type OpenApiNumberPropertyRequest struct {
	Minimum          *float64 `json:"minimum,omitempty"`
	Maximum          *float64 `json:"maximum,omitempty"`
	Format           *string  `json:"format,omitempty"`
	ExclusiveMinimum *bool    `json:"exclusive_minimum,omitempty"`
	ExclusiveMaximum *bool    `json:"exclusive_maximum,omitempty"`
	Default          *float64 `json:"default,omitempty"`
	Title            *string  `json:"title,omitempty"`
	Description      *string  `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiNumberPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiNumberPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiNumberPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiNumberPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'object'
type OpenApiObjectProperty struct {
	Properties           map[string]*OpenApiProperty `json:"properties,omitempty"`
	Required             []string                    `json:"required,omitempty"`
	MinProperties        *int                        `json:"min_properties,omitempty"`
	MaxProperties        *int                        `json:"max_properties,omitempty"`
	PropertyNames        *OpenApiProperty            `json:"property_names,omitempty"`
	AdditionalProperties *OpenApiProperty            `json:"additional_properties,omitempty"`
	PatternProperties    map[string]*OpenApiProperty `json:"pattern_properties,omitempty"`
	Default              map[string]interface{}      `json:"default,omitempty"`
	Title                *string                     `json:"title,omitempty"`
	Description          *string                     `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiObjectProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiObjectProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiObjectProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiObjectProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'object'
type OpenApiObjectPropertyRequest struct {
	Properties           map[string]*OpenApiPropertyRequest `json:"properties,omitempty"`
	Required             []string                           `json:"required,omitempty"`
	MinProperties        *int                               `json:"min_properties,omitempty"`
	MaxProperties        *int                               `json:"max_properties,omitempty"`
	PropertyNames        *OpenApiPropertyRequest            `json:"property_names,omitempty"`
	AdditionalProperties *OpenApiPropertyRequest            `json:"additional_properties,omitempty"`
	PatternProperties    map[string]*OpenApiPropertyRequest `json:"pattern_properties,omitempty"`
	Default              map[string]interface{}             `json:"default,omitempty"`
	Title                *string                            `json:"title,omitempty"`
	Description          *string                            `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiObjectPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiObjectPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiObjectPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiObjectPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'oneOf'
type OpenApiOneOfProperty struct {
	OneOf       []*OpenApiProperty `json:"oneOf,omitempty"`
	Title       *string            `json:"title,omitempty"`
	Description *string            `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiOneOfProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiOneOfProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiOneOfProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiOneOfProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'oneOf'
type OpenApiOneOfPropertyRequest struct {
	OneOf       []*OpenApiPropertyRequest `json:"oneOf,omitempty"`
	Title       *string                   `json:"title,omitempty"`
	Description *string                   `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiOneOfPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiOneOfPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiOneOfPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiOneOfPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OpenApiProperty struct {
	Type    string
	Array   *OpenApiArrayProperty
	Object  *OpenApiObjectProperty
	Integer *OpenApiIntegerProperty
	Number  *OpenApiNumberProperty
	String  *OpenApiStringProperty
	Boolean *OpenApiBooleanProperty
	OneOf   *OpenApiOneOfProperty
	Const   *OpenApiConstProperty
}

func NewOpenApiPropertyFromArray(value *OpenApiArrayProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "array", Array: value}
}

func NewOpenApiPropertyFromObject(value *OpenApiObjectProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "object", Object: value}
}

func NewOpenApiPropertyFromInteger(value *OpenApiIntegerProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "integer", Integer: value}
}

func NewOpenApiPropertyFromNumber(value *OpenApiNumberProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "number", Number: value}
}

func NewOpenApiPropertyFromString(value *OpenApiStringProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "string", String: value}
}

func NewOpenApiPropertyFromBoolean(value *OpenApiBooleanProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "boolean", Boolean: value}
}

func NewOpenApiPropertyFromOneOf(value *OpenApiOneOfProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "oneOf", OneOf: value}
}

func NewOpenApiPropertyFromConst(value *OpenApiConstProperty) *OpenApiProperty {
	return &OpenApiProperty{Type: "const", Const: value}
}

func (o *OpenApiProperty) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "array":
		value := new(OpenApiArrayProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Array = value
	case "object":
		value := new(OpenApiObjectProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Object = value
	case "integer":
		value := new(OpenApiIntegerProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Integer = value
	case "number":
		value := new(OpenApiNumberProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Number = value
	case "string":
		value := new(OpenApiStringProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.String = value
	case "boolean":
		value := new(OpenApiBooleanProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Boolean = value
	case "oneOf":
		value := new(OpenApiOneOfProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.OneOf = value
	case "const":
		value := new(OpenApiConstProperty)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Const = value
	}
	return nil
}

func (o OpenApiProperty) MarshalJSON() ([]byte, error) {
	switch o.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "array":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiArrayProperty
		}{
			Type:                 o.Type,
			OpenApiArrayProperty: o.Array,
		}
		return json.Marshal(marshaler)
	case "object":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiObjectProperty
		}{
			Type:                  o.Type,
			OpenApiObjectProperty: o.Object,
		}
		return json.Marshal(marshaler)
	case "integer":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiIntegerProperty
		}{
			Type:                   o.Type,
			OpenApiIntegerProperty: o.Integer,
		}
		return json.Marshal(marshaler)
	case "number":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiNumberProperty
		}{
			Type:                  o.Type,
			OpenApiNumberProperty: o.Number,
		}
		return json.Marshal(marshaler)
	case "string":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiStringProperty
		}{
			Type:                  o.Type,
			OpenApiStringProperty: o.String,
		}
		return json.Marshal(marshaler)
	case "boolean":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiBooleanProperty
		}{
			Type:                   o.Type,
			OpenApiBooleanProperty: o.Boolean,
		}
		return json.Marshal(marshaler)
	case "oneOf":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiOneOfProperty
		}{
			Type:                 o.Type,
			OpenApiOneOfProperty: o.OneOf,
		}
		return json.Marshal(marshaler)
	case "const":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiConstProperty
		}{
			Type:                 o.Type,
			OpenApiConstProperty: o.Const,
		}
		return json.Marshal(marshaler)
	}
}

type OpenApiPropertyVisitor interface {
	VisitArray(*OpenApiArrayProperty) error
	VisitObject(*OpenApiObjectProperty) error
	VisitInteger(*OpenApiIntegerProperty) error
	VisitNumber(*OpenApiNumberProperty) error
	VisitString(*OpenApiStringProperty) error
	VisitBoolean(*OpenApiBooleanProperty) error
	VisitOneOf(*OpenApiOneOfProperty) error
	VisitConst(*OpenApiConstProperty) error
}

func (o *OpenApiProperty) Accept(visitor OpenApiPropertyVisitor) error {
	switch o.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "array":
		return visitor.VisitArray(o.Array)
	case "object":
		return visitor.VisitObject(o.Object)
	case "integer":
		return visitor.VisitInteger(o.Integer)
	case "number":
		return visitor.VisitNumber(o.Number)
	case "string":
		return visitor.VisitString(o.String)
	case "boolean":
		return visitor.VisitBoolean(o.Boolean)
	case "oneOf":
		return visitor.VisitOneOf(o.OneOf)
	case "const":
		return visitor.VisitConst(o.Const)
	}
}

type OpenApiPropertyRequest struct {
	Type    string
	Array   *OpenApiArrayPropertyRequest
	Object  *OpenApiObjectPropertyRequest
	Integer *OpenApiIntegerPropertyRequest
	Number  *OpenApiNumberPropertyRequest
	String  *OpenApiStringPropertyRequest
	Boolean *OpenApiBooleanPropertyRequest
	OneOf   *OpenApiOneOfPropertyRequest
	Const   *OpenApiConstPropertyRequest
}

func NewOpenApiPropertyRequestFromArray(value *OpenApiArrayPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "array", Array: value}
}

func NewOpenApiPropertyRequestFromObject(value *OpenApiObjectPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "object", Object: value}
}

func NewOpenApiPropertyRequestFromInteger(value *OpenApiIntegerPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "integer", Integer: value}
}

func NewOpenApiPropertyRequestFromNumber(value *OpenApiNumberPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "number", Number: value}
}

func NewOpenApiPropertyRequestFromString(value *OpenApiStringPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "string", String: value}
}

func NewOpenApiPropertyRequestFromBoolean(value *OpenApiBooleanPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "boolean", Boolean: value}
}

func NewOpenApiPropertyRequestFromOneOf(value *OpenApiOneOfPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "oneOf", OneOf: value}
}

func NewOpenApiPropertyRequestFromConst(value *OpenApiConstPropertyRequest) *OpenApiPropertyRequest {
	return &OpenApiPropertyRequest{Type: "const", Const: value}
}

func (o *OpenApiPropertyRequest) UnmarshalJSON(data []byte) error {
	var unmarshaler struct {
		Type string `json:"type"`
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	o.Type = unmarshaler.Type
	switch unmarshaler.Type {
	case "array":
		value := new(OpenApiArrayPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Array = value
	case "object":
		value := new(OpenApiObjectPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Object = value
	case "integer":
		value := new(OpenApiIntegerPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Integer = value
	case "number":
		value := new(OpenApiNumberPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Number = value
	case "string":
		value := new(OpenApiStringPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.String = value
	case "boolean":
		value := new(OpenApiBooleanPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Boolean = value
	case "oneOf":
		value := new(OpenApiOneOfPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.OneOf = value
	case "const":
		value := new(OpenApiConstPropertyRequest)
		if err := json.Unmarshal(data, &value); err != nil {
			return err
		}
		o.Const = value
	}
	return nil
}

func (o OpenApiPropertyRequest) MarshalJSON() ([]byte, error) {
	switch o.Type {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "array":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiArrayPropertyRequest
		}{
			Type:                        o.Type,
			OpenApiArrayPropertyRequest: o.Array,
		}
		return json.Marshal(marshaler)
	case "object":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiObjectPropertyRequest
		}{
			Type:                         o.Type,
			OpenApiObjectPropertyRequest: o.Object,
		}
		return json.Marshal(marshaler)
	case "integer":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiIntegerPropertyRequest
		}{
			Type:                          o.Type,
			OpenApiIntegerPropertyRequest: o.Integer,
		}
		return json.Marshal(marshaler)
	case "number":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiNumberPropertyRequest
		}{
			Type:                         o.Type,
			OpenApiNumberPropertyRequest: o.Number,
		}
		return json.Marshal(marshaler)
	case "string":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiStringPropertyRequest
		}{
			Type:                         o.Type,
			OpenApiStringPropertyRequest: o.String,
		}
		return json.Marshal(marshaler)
	case "boolean":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiBooleanPropertyRequest
		}{
			Type:                          o.Type,
			OpenApiBooleanPropertyRequest: o.Boolean,
		}
		return json.Marshal(marshaler)
	case "oneOf":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiOneOfPropertyRequest
		}{
			Type:                        o.Type,
			OpenApiOneOfPropertyRequest: o.OneOf,
		}
		return json.Marshal(marshaler)
	case "const":
		var marshaler = struct {
			Type string `json:"type"`
			*OpenApiConstPropertyRequest
		}{
			Type:                        o.Type,
			OpenApiConstPropertyRequest: o.Const,
		}
		return json.Marshal(marshaler)
	}
}

type OpenApiPropertyRequestVisitor interface {
	VisitArray(*OpenApiArrayPropertyRequest) error
	VisitObject(*OpenApiObjectPropertyRequest) error
	VisitInteger(*OpenApiIntegerPropertyRequest) error
	VisitNumber(*OpenApiNumberPropertyRequest) error
	VisitString(*OpenApiStringPropertyRequest) error
	VisitBoolean(*OpenApiBooleanPropertyRequest) error
	VisitOneOf(*OpenApiOneOfPropertyRequest) error
	VisitConst(*OpenApiConstPropertyRequest) error
}

func (o *OpenApiPropertyRequest) Accept(visitor OpenApiPropertyRequestVisitor) error {
	switch o.Type {
	default:
		return fmt.Errorf("invalid type %s in %T", o.Type, o)
	case "array":
		return visitor.VisitArray(o.Array)
	case "object":
		return visitor.VisitObject(o.Object)
	case "integer":
		return visitor.VisitInteger(o.Integer)
	case "number":
		return visitor.VisitNumber(o.Number)
	case "string":
		return visitor.VisitString(o.String)
	case "boolean":
		return visitor.VisitBoolean(o.Boolean)
	case "oneOf":
		return visitor.VisitOneOf(o.OneOf)
	case "const":
		return visitor.VisitConst(o.Const)
	}
}

// An OpenAPI specification of a parameter with type 'string'
type OpenApiStringProperty struct {
	MinLength   *int    `json:"min_length,omitempty"`
	MaxLength   *int    `json:"max_length,omitempty"`
	Pattern     *string `json:"pattern,omitempty"`
	Format      *string `json:"format,omitempty"`
	Default     *string `json:"default,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiStringProperty) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiStringProperty
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiStringProperty(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiStringProperty) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// An OpenAPI specification of a parameter with type 'string'
type OpenApiStringPropertyRequest struct {
	MinLength   *int    `json:"min_length,omitempty"`
	MaxLength   *int    `json:"max_length,omitempty"`
	Pattern     *string `json:"pattern,omitempty"`
	Format      *string `json:"format,omitempty"`
	Default     *string `json:"default,omitempty"`
	Title       *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`

	_rawJSON json.RawMessage
}

func (o *OpenApiStringPropertyRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler OpenApiStringPropertyRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OpenApiStringPropertyRequest(value)
	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OpenApiStringPropertyRequest) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}
